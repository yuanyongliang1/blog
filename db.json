{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/images/photo.jpg","path":"images/photo.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"e9af4aaed349a1194248c8a016d2f9534d29dfac","modified":1705644565801},{"_id":"source/_posts/ConcurrentHashMap.md","hash":"f92ffdd3d8840fe42129082dea6d53f1fd55347f","modified":1708654335485},{"_id":"source/_posts/encryptionTest.md","hash":"2273d2e85b4e1245723ff5b86a423843436e661b","modified":1708595657514},{"_id":"source/_posts/threeHandshake.md","hash":"644f82e84edb8550966b2a4ad5c60e20fda94e03","modified":1708654384877},{"_id":"source/_posts/redisPersistence.md","hash":"acba65494133bf442c334c1b35e6faaa0e439970","modified":1708654354551},{"_id":"source/_posts/threadPool.md","hash":"eb6658a267624f04208fd23ff27567c474949b6e","modified":1708654370030},{"_id":"source/_posts/readme.txt","hash":"c68d89cad38a88a357bebb9c0c7c85c759b7929e","modified":1708594683644},{"_id":"source/about/index.md","hash":"41b4fb2a4f60213520bb82d6792e930cbb058ecb","modified":1708394999252},{"_id":"source/categories/index.md","hash":"63d7f720aefbe5781e530f388f123b39f54e60a9","modified":1708394851573},{"_id":"source/schedule/index.md","hash":"41ed658a87df3413bbc2a573b1c086b78b0c1342","modified":1708394924546},{"_id":"source/images/photo.jpg","hash":"e406955da78ae0685d4596dff5bb3980b8481775","modified":1705646068859},{"_id":"source/sitemap-xml/index.md","hash":"975c6d34e95189a39c17ed938c4d18220a8bbb40","modified":1705644550467},{"_id":"source/tags/index.md","hash":"8462497ac7d618559ab8c57e1b89ee32848f4484","modified":1708394745466},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1705645625207},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1705645625208},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1705645625209},{"_id":"themes/hexo-theme-next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1705645625234},{"_id":"themes/hexo-theme-next/_vendors.yml","hash":"f7cb20ea4c81d4db7efef76712c2dba7d832e2e7","modified":1705645625238},{"_id":"themes/hexo-theme-next/.stylelintrc","hash":"20f46858e47aba6b3fc47e9b43e9f7531fa66e33","modified":1705645625236},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1705645625236},{"_id":"themes/hexo-theme-next/README.md","hash":"c927b1826bc70a705f35b065f4d4c21aa8d5f17b","modified":1705645625237},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1705645625239},{"_id":"themes/hexo-theme-next/_config.yml","hash":"c9328a530f50117f05bde86037b90340649caf0e","modified":1708396828120},{"_id":"themes/hexo-theme-next/package.json","hash":"15da20973d095f7e2ca484b64737791da20593bf","modified":1705645894994},{"_id":"themes/hexo-theme-next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1705645625302},{"_id":"themes/hexo-theme-next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1705645625210},{"_id":"themes/hexo-theme-next/.githooks/install.js","hash":"72757c6827909a5f2c217ddbbdf6034ca6fab74a","modified":1705645625209},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1705645625211},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"82a3d202da8fe6ce765715bd5b7571676e90364d","modified":1705645625211},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"009b397b686bba7b63885da59d904144ff59b24e","modified":1705645625215},{"_id":"themes/hexo-theme-next/.github/label-commenter-config.yml","hash":"c8cfbe7cec995ccb45be8a39f4546bf4978fb3a3","modified":1705645625228},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1705645625215},{"_id":"themes/hexo-theme-next/.github/labeler.yml","hash":"35da1a37e9a6bdee1eeae30a8816cd75c9a04b3b","modified":1705645625229},{"_id":"themes/hexo-theme-next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1705645625228},{"_id":"themes/hexo-theme-next/.github/release.yml","hash":"83b4dae3f8d76619e208d2110a247b3ccadd64d8","modified":1705645625229},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1705645625240},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1705645625240},{"_id":"themes/hexo-theme-next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1705645625245},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1705645625241},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"c77fc13e0431e71eeb0f767a0a436284fc81df90","modified":1705645625246},{"_id":"themes/hexo-theme-next/languages/bn.yml","hash":"30ffd43588ddf2cd39432d964087242e1c3e5407","modified":1705645625246},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1705645625247},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"5101612f7cac38884206d28319532f1aab32fbe6","modified":1705645625247},{"_id":"themes/hexo-theme-next/languages/eo.yml","hash":"7bd0124c2d1dcdbfde350fce335e130556ebcee8","modified":1705645625249},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"5ca2c0b3c95dd87485f2d2b3477f88810ad1a63b","modified":1705645625248},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"31c2a47d14cd5b804cae0c0b44d43bece069d3aa","modified":1705645625250},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"cc6ef3144b954daa29ce7d42f08191eafe052fab","modified":1705645625250},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"bd2c30def05a37c66653900ca07952d52a142961","modified":1705645625251},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"3a7469446f77e5d1a12eee828ebc49ecb43b6c35","modified":1705645625251},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"4969c4f17d88003135218de72ddf0bf8d894dc07","modified":1705645625252},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"e660ec12b9eade103492aba7aa9b23ef06d353a9","modified":1705645625252},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"04927e331652ee13f9c8a110fe12d7f936a6b0e6","modified":1705645625253},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"4575f93c4ee4383bdfaca01ad6ffff5664cbbbae","modified":1705645625253},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"ff9aa6a6549d07b7dc667094f34a06945e2c21b4","modified":1705645625254},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"1fa9f4f4f208191afd0e6108ce89d91c657a6bd0","modified":1705645625254},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"d726265bc5cf8bd4fb64f85b2d07b3326439bb00","modified":1705645625255},{"_id":"themes/hexo-theme-next/languages/si.yml","hash":"07f98d6ca99bceef35254c60fc0e4401ff608557","modified":1705645625255},{"_id":"themes/hexo-theme-next/languages/tk.yml","hash":"7b9115e0520dc81a95a7c8e4f56a01fc84f74017","modified":1705645625256},{"_id":"themes/hexo-theme-next/languages/th.yml","hash":"dc434da945d52dc7a8d26acc80b23e6922712f89","modified":1705645625256},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"822ec400a0a2bb2245abf31e9ed4f3af77b2814e","modified":1705645625257},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"10a2f2e7183410d1d10fa937e3e0198b46bf4930","modified":1705645625257},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"8344cb90ee92a21a398faff3317c025a43446db5","modified":1705645625258},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"c06c95121b3e5bd5abe01848073fbe7f9d6dcda9","modified":1705645625258},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"6cfdc633870b814f3d75438e86f6ee5dba068987","modified":1705645625258},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"198e3745b99ba5a2b75cc24d03f3412e272b7fa1","modified":1705645625259},{"_id":"themes/hexo-theme-next/layout/_layout.njk","hash":"0f2760cd7550ca30ffcc28e2dbd7f031a237b5a7","modified":1705645625260},{"_id":"themes/hexo-theme-next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1705645625298},{"_id":"themes/hexo-theme-next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1705645625298},{"_id":"themes/hexo-theme-next/layout/page.njk","hash":"6d2f7e7cd9fe868e96765b82d17df49081379e27","modified":1705645625299},{"_id":"themes/hexo-theme-next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1705645625299},{"_id":"themes/hexo-theme-next/layout/post.njk","hash":"6767de9702a07a2a4e16a8a6bc9c5919536c1e3f","modified":1705645625300},{"_id":"themes/hexo-theme-next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1705645625301},{"_id":"themes/hexo-theme-next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1705645625389},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1705645625212},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1705645625213},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1705645625214},{"_id":"themes/hexo-theme-next/.github/workflows/codeql.yml","hash":"2966e75aa9dc08bdb73b9fb08952975788da0e9a","modified":1705645625230},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1705645625213},{"_id":"themes/hexo-theme-next/.github/workflows/labeler.yml","hash":"e8ca602587b3abe08b60fc1bdc1c2d62aeeb85bb","modified":1705645625231},{"_id":"themes/hexo-theme-next/.github/workflows/label-commenter.yml","hash":"dc4809131c54a1d9f8e7392aeaf53b13c6befd90","modified":1705645625231},{"_id":"themes/hexo-theme-next/.github/workflows/linter.yml","hash":"1806b6eb58b2ac40fa683d311098b1e02d010ec3","modified":1705645625232},{"_id":"themes/hexo-theme-next/.github/workflows/lock.yml","hash":"80dc185dfaeb2927db72a44ff2382e05f47a2df5","modified":1705645625234},{"_id":"themes/hexo-theme-next/.github/workflows/tester.yml","hash":"7e7e05bfa5c0793d7ca1a46135db47204c3ba80c","modified":1705645625234},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"743bed1823f55878a6e5772e39745737fd0eff3d","modified":1705645625242},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"e077bebf4fb89b159b840b30f0230b95ff7db8a5","modified":1705645625243},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"3d1d53536269046c379c1bb75fa31b56ba530e3b","modified":1705645625244},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1705645625243},{"_id":"themes/hexo-theme-next/layout/_macro/post.njk","hash":"8f7eaba7c3416a64d61e5bc7547645fc1c058b2a","modified":1705645625261},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"33d771e7c88031dd071186cbe2196a0924ba77f0","modified":1705645625260},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.njk","hash":"b9fc0a6b02f0380de939d1ea2a7c7d2e6be9f462","modified":1705645625262},{"_id":"themes/hexo-theme-next/layout/_partials/footer.njk","hash":"38801c4fa7610d3fc8e903adfdf5999e90017cf8","modified":1705648942286},{"_id":"themes/hexo-theme-next/layout/_partials/comments.njk","hash":"60f4620dd479da6d86d1d493440e9e2a28b6e132","modified":1705645625262},{"_id":"themes/hexo-theme-next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1705645625268},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.njk","hash":"c55167bc0dbe7e104d4f4d782e98fcabc7e07a35","modified":1705645625271},{"_id":"themes/hexo-theme-next/layout/_partials/widgets.njk","hash":"9471c4f3aeee101b9b9a8c2aae7d21ec7277574e","modified":1705645625278},{"_id":"themes/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"9ef81adb0c35ebdb4499602155e87611aee0762a","modified":1705645625280},{"_id":"themes/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1705645625289},{"_id":"themes/hexo-theme-next/layout/_third-party/index.njk","hash":"9bab629e2971b029545511b48f397445858ac7f0","modified":1705645625290},{"_id":"themes/hexo-theme-next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1705645625292},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1705645625292},{"_id":"themes/hexo-theme-next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1705645625279},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1705645625279},{"_id":"themes/hexo-theme-next/scripts/events/index.js","hash":"8ae618d4436dab49928c2bebc0837e5310dbe7de","modified":1705645625303},{"_id":"themes/hexo-theme-next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1705645625313},{"_id":"themes/hexo-theme-next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1705645625313},{"_id":"themes/hexo-theme-next/scripts/filters/minify.js","hash":"32061a93a44a545518bb888db4438baf27e2b531","modified":1705645625314},{"_id":"themes/hexo-theme-next/scripts/filters/post.js","hash":"e6cf4c94fc2291215a3345134ddbbc74d5091b00","modified":1705645625314},{"_id":"themes/hexo-theme-next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1705645625319},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1705645625320},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1705645625320},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1705645625319},{"_id":"themes/hexo-theme-next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1705645625322},{"_id":"themes/hexo-theme-next/scripts/tags/index.js","hash":"1a680bb01e14152905efe3ef624621dd74cf27c3","modified":1705645625321},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1705645625322},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1705645625321},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1705645625323},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1705645625323},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1705645625324},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1705645625324},{"_id":"themes/hexo-theme-next/scripts/tags/wavedrom.js","hash":"188c1dd5d7dbc566cac00946da86aa76fff1c682","modified":1705645625325},{"_id":"themes/hexo-theme-next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1705645625315},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"43568a872a93259fc1c497724a53914474ef83ae","modified":1705645625315},{"_id":"themes/hexo-theme-next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1705645625316},{"_id":"themes/hexo-theme-next/scripts/helpers/next-config.js","hash":"598e7d0051b65cd9c84238c58bb1a625aa8bba31","modified":1705645625316},{"_id":"themes/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"2e8dcc12a52517bb4e00ea611720bcd298624112","modified":1705645625317},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"ceff5e76564a5d6ed3e0222bccf581e106d80f3c","modified":1705645625317},{"_id":"themes/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"12814eb1845830204e3a398eb93a2c15e0ff8d94","modified":1705645625318},{"_id":"themes/hexo-theme-next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1705645625326},{"_id":"themes/hexo-theme-next/source/css/_mixins.styl","hash":"eacfdd1795ccc0138e194fbf9381d3a64b5ba130","modified":1705645625358},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"c326550ce8b4deaa9b647bcfe3cdc04c100644e6","modified":1705645625368},{"_id":"themes/hexo-theme-next/source/css/noscript.styl","hash":"64b378a4d2f0b36bf666fba13b57c59da3a8ac83","modified":1705645625368},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1705645625369},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1705645625370},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1705645625369},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1705645625370},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1705645625371},{"_id":"themes/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1705645625370},{"_id":"themes/hexo-theme-next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1705645625371},{"_id":"themes/hexo-theme-next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1705645625372},{"_id":"themes/hexo-theme-next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1705645625372},{"_id":"themes/hexo-theme-next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1705645625372},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"d4c01d5317d45444e91a52236b751c9e9ab1bc16","modified":1705645625373},{"_id":"themes/hexo-theme-next/source/js/pjax.js","hash":"c999bfc7cad747e3da0fe3d75c31dd933bf63016","modified":1705645625374},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"8759690669651d76d6eeca6e2a0f79aa898fc03c","modified":1705645625373},{"_id":"themes/hexo-theme-next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1705645625388},{"_id":"themes/hexo-theme-next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1705645625374},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"901d99cb8c45ff194971124e244e6a14e879134c","modified":1705645625387},{"_id":"themes/hexo-theme-next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1705645625389},{"_id":"themes/hexo-theme-next/test/helpers/next-url.js","hash":"557d2c819184620e5ca65cb0a140a4cf7f7aeb9e","modified":1705645625389},{"_id":"themes/hexo-theme-next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1705645625390},{"_id":"themes/hexo-theme-next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1705645625390},{"_id":"themes/hexo-theme-next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1705645625390},{"_id":"themes/hexo-theme-next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1705645625391},{"_id":"themes/hexo-theme-next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1705645625391},{"_id":"themes/hexo-theme-next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1705645625392},{"_id":"themes/hexo-theme-next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1705645625391},{"_id":"themes/hexo-theme-next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1705645625392},{"_id":"themes/hexo-theme-next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1705645625393},{"_id":"themes/hexo-theme-next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1705645625393},{"_id":"themes/hexo-theme-next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1705645625393},{"_id":"themes/hexo-theme-next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1705645625394},{"_id":"themes/hexo-theme-next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1705645625394},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1705645625263},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.njk","hash":"e016c3f80db433f17781caf26e44f2089a71550a","modified":1705645625264},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.njk","hash":"7bf2b6ab499775355bbf8f3ae597ff7bc00e89e4","modified":1705645625265},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1705645625267},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1705645625265},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1705645625266},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1705645625267},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1705645625269},{"_id":"themes/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1705645625270},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1705645625268},{"_id":"themes/hexo-theme-next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1705645625269},{"_id":"themes/hexo-theme-next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1705645625271},{"_id":"themes/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"8d76300e31178e790400a37adfaf9bc0e5f8fae7","modified":1705645625277},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"ebe45ab38ace03ea74eed3f676ec1cb5805a3c8a","modified":1705645625272},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"22c922214982c4bb78ea92fa2ff1de93d98216a3","modified":1705645625271},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1705645625272},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"9a7eda45ad0753d5f624c51a56e00277ba97c93d","modified":1705645625273},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"fd6fde597ea2fb7b80cffd0a3553c8e73acb8ab2","modified":1705645625273},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"8a6414987474592e82b3e57eeb0bd526ae42d235","modified":1705645625274},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1705645625275},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1705645625276},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1705645625281},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1705645625277},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"17173c45f0b740669ef45aaae1fe96eeb0a0ff52","modified":1705645625282},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1705645625282},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1705645625283},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"81abcf790cf97395cde9e3cd6d5d1aa5656bd134","modified":1705645625283},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"24719266662fcff63e88a21ee9b5b284abb8b37c","modified":1705645625284},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"43238bc1bc2e88d707f8097814ef3ff830cbe641","modified":1705645625284},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"64ed6fecae79f9f9c61e956d2bd077792473e069","modified":1705645625285},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"c8b8c10dcf5c4ffa4a8aec5ba5892842ec204ac0","modified":1705645625285},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1705645625286},{"_id":"themes/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1705645625286},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1705645625287},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1705645625287},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1705645625288},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1705645625288},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1705645625288},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1705645625289},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1705645625289},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1705645625290},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1df65b1390add93b86ae3f9423d96a130b0ece04","modified":1705645625291},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1705645625292},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1705645625294},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1705645625294},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1705645625295},{"_id":"themes/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1705645625295},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1705645625293},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1705645625293},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1705645625296},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1705645625296},{"_id":"themes/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"baec18165d767094ecb2dda7141ca3bd8c6f2eb9","modified":1705645625297},{"_id":"themes/hexo-theme-next/scripts/events/lib/config.js","hash":"7c29184a37222d6499c5220264fda6942afc03a9","modified":1705645625304},{"_id":"themes/hexo-theme-next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1705645625305},{"_id":"themes/hexo-theme-next/scripts/events/lib/highlight.js","hash":"71c7bd19f0a94cb03c7b1eb7f1e932e07a5f4a6a","modified":1705645625304},{"_id":"themes/hexo-theme-next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1705645625306},{"_id":"themes/hexo-theme-next/scripts/events/lib/utils.js","hash":"c2f9b18d2958329d5f124d9ad3fea21a326e106c","modified":1705645625306},{"_id":"themes/hexo-theme-next/scripts/events/lib/vendors.js","hash":"48fed05ba4efffeeb1aaed2190ae6e7d0ea04e99","modified":1705645625307},{"_id":"themes/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"761760031e49edb77277bd4a8582774959240d6b","modified":1705645625308},{"_id":"themes/hexo-theme-next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1705645625309},{"_id":"themes/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1705645625310},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"4dbe9652ae53a181c86eb7e9005a5255f0540055","modified":1705645625311},{"_id":"themes/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1705645625310},{"_id":"themes/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1705645625311},{"_id":"themes/hexo-theme-next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1705645625312},{"_id":"themes/hexo-theme-next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1705645625312},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1705645625366},{"_id":"themes/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1705645625312},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1705645625367},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"5092cacdfbc482996d0bee9fdf2c37d8d3ae863c","modified":1705645625366},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"77d9c468897283223cdc922eb7e146ca7a83420c","modified":1705645625367},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"c8b101c76b179877a22256922a56d30d0926bc51","modified":1705645625367},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"aa84bdd853a9b0646ad9157e26df949ba0ec57c3","modified":1705645625375},{"_id":"themes/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5cff12a5c9fc55a68f0f57a291494cd738301ba4","modified":1705645625376},{"_id":"themes/hexo-theme-next/source/js/third-party/fancybox.js","hash":"e3022c2ea60409a82a3e2a0d3615e4a25c684551","modified":1705645625381},{"_id":"themes/hexo-theme-next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1705645625383},{"_id":"themes/hexo-theme-next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1705645625383},{"_id":"themes/hexo-theme-next/source/css/_common/components/index.styl","hash":"49c3063b46d65796003a822deed971abee41675e","modified":1705645625327},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"969c3797d4315a2873aa143d0674d251fa0c5703","modified":1705645625327},{"_id":"themes/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1705645625336},{"_id":"themes/hexo-theme-next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1705645625343},{"_id":"themes/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"db9e807cc8531ee0052f7cdf6a4cb92a8add3fd2","modified":1705645625343},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1705645625349},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1705645625349},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1705645625349},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1705645625352},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1705645625351},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"fd4a2d2303f107a021837aa6e3d977c2f9d14c42","modified":1705645625352},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1705645625352},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"e728caca94567b4d4215402d01e449e23969e7e1","modified":1705645625359},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"aa34abe71ad476922a0371bcac82cd8e5b45d383","modified":1705645625357},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"be9d0e9493802c22f16a0645a59d0c2b556c1c3c","modified":1705645625359},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"2db5ada757f7ffb9a36b06400cf30d80ec039b6e","modified":1705645625360},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"68f8d30071516913a7a958e01d010e8a93f7aa24","modified":1705645625360},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"82311a531e26ca5a6ad17cf14959da75d4ac6106","modified":1705645625360},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1705645625361},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"2f19fe2aba8f63fc99641e50bcb96cc9a4feb8a4","modified":1705645625361},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"e6e8892fccb02bff163d9b574984e0440a00d756","modified":1705645625362},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"8b21da21dd1f34505875619bfd355ba1f826d7a7","modified":1705645625362},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1705645625363},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"06835446a1c7353f434a9527889a53d6be69766c","modified":1705645625362},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1705645625363},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"6630a642ad2311ec09466c962963c006c4df4c38","modified":1705645625363},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"5393f045f12b1eb9373c421627727f40f5b148e7","modified":1705645625364},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1705645625364},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e06e0fd44e39838ce22ac7829a2421f8c9e1b12d","modified":1705645625365},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1705645625365},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1705645625365},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1705645625376},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1705645625377},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"27a27de3d4e0d33e9c647f7ae78e1dd6d36d2463","modified":1705645625376},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1705645625378},{"_id":"themes/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"f24604710002234f18a7b5cfe9ccdf3ed6e725a8","modified":1705645625377},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1705645625379},{"_id":"themes/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1705645625378},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"07e0038b221b9a4fd8ccac75093de3dee1f8315e","modified":1705645625379},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"5673d28509a8e837a512da490a88b7bf5162fc49","modified":1705645625379},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1705645625380},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1705645625380},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1705645625381},{"_id":"themes/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1705645625380},{"_id":"themes/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1705645625382},{"_id":"themes/hexo-theme-next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1705645625382},{"_id":"themes/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"e927000b375e79e2d173bdc6b8b45e67364fad4a","modified":1705645625384},{"_id":"themes/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"e6361ed3d5fa959e11e90f7dab8fdaff398b4425","modified":1705645625384},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"99bb6c073842873d4a4da6fadb0d2a1f70864a35","modified":1705645625386},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1705645625387},{"_id":"themes/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"9cafc8f751581d496f1f3c056b95f3b8e1ebbf4e","modified":1705645625387},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"ce12b5007c9aa997738641c06a1c081c357e27bd","modified":1705645625385},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"aa04527f76de7646573ea327d4f6145200d6070d","modified":1705645625331},{"_id":"themes/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"7db3233f0b33870943ce1547326a67f9e628b411","modified":1705645625385},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"6d8827b14ea1af16bfa21e194006ba9fa10ce50b","modified":1705645625331},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ffcaf94d0de9e7292c320225541d5550d4f0ba56","modified":1705645625332},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"7245d8364092c2d184e658e801ba94815a2a1f81","modified":1705645625332},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"4790d37a40b80f7278ec55274f017dad21791038","modified":1705645625333},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1705645625333},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"d514d09525256d510c83829aa6895bb40678d576","modified":1705645625334},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1705645625334},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"777efaacbabb623f1d77fac5dd784401f8dea4cd","modified":1705645625335},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"0a698c3adba896a46e26850967cb73295c521940","modified":1705645625335},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"a2ffaa06c963514a79fda52665e707af6e8e2f5e","modified":1705645625336},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"406c03be3cf8a8411227bc1fecf942ca368f7e2a","modified":1705645625337},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1705645625338},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"8a7b70ef14c7110aaceb30ea2f7eb4b202f0f0cd","modified":1705645625337},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1705645625338},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1705645625338},{"_id":"themes/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"39066b4e2e914d85736c9c33fa51f21a3f86c0e4","modified":1705645625339},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1705645625328},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1705645625330},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1705645625328},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1705645625330},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1705645625330},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1705645625340},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1705645625340},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"dce8ea62d7d7b08a0444fbb2f617be30bfcfc152","modified":1705645625342},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"038625515ba4760e4dda6792549bddc0db5a3d20","modified":1705645625341},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"dd84ccb5a6b8e79b0cbdd1d7ea8e4fca8d2cc97c","modified":1705645625341},{"_id":"themes/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1705645625342},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"bdfef8d2363bc199dfbcc23ee833edca27cc9fcf","modified":1705645625344},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"63fb6d36d9ea62c7e39274c666e102b12f64ff77","modified":1705645625345},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1705645625345},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b3689beb90cda64cafecaf6b25981fe8a9525992","modified":1705645625344},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"f5c1a6afcd2d460ccd5987ef1af747fc99d3ea72","modified":1705645625346},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"f8a97aad14e0b16b555ee0048da5402f818f9693","modified":1705645625346},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"cbc6b0938a2e60f35a5df32210904fb16e4938da","modified":1705645625347},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"8f82d5141a18f6319e0609a3f6e4fcca6d442203","modified":1705645625347},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"509bad7d1d6b5c6f24a3f205b2ed7b65a2326dd4","modified":1705645625348},{"_id":"themes/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1705645625348},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"98a233884b1953952b8364895617fe53def60038","modified":1705645625350},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"41c0516f76513036e30a70509a6d33e8a79bdba2","modified":1705645625350},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1705645625353},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"333f48b1107c63e992fdbe1290eeb2a7cc1d7a0c","modified":1705645625351},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1705645625354},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"1772ade171aa6bd806909d69003cfc498c3af019","modified":1705645625355},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1705645625355},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1705645625355},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1705645625356},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1705645625356},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"3324e9d09faf3903bc9815358bda4000bbb691fa","modified":1705645625356},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"2f4c791b5999b2e1a707bd473c1db7c21d206a27","modified":1705645625357},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"ed76879122ad1b62d210522de4037808644a590d","modified":1705645625356},{"_id":"public/404/index.html","hash":"686c1d3397e1f5b10fb4f6a5035eaa48f99bc702","modified":1709089906320},{"_id":"public/tags/index.html","hash":"cee32066e7552141c863a3fd1de46fe5179ff027","modified":1709089906320},{"_id":"public/about/index.html","hash":"30fb112883fb1e4bccf17b5b6d6e0dcb301189ca","modified":1709089906320},{"_id":"public/categories/index.html","hash":"dee329b79789fedf46f8a906cd6b7077f66162fe","modified":1709089906320},{"_id":"public/schedule/index.html","hash":"294d9a5107eade46e3d57d15caa5a849e632493a","modified":1709089906320},{"_id":"public/sitemap-xml/index.html","hash":"902b3b7fdf244f27f8270eb19dce1e809b044d6d","modified":1709089906320},{"_id":"public/2024/02/20/threeHandshake/index.html","hash":"13fbd7b7eb224fe012316c0829ba901e2a90791e","modified":1709089906320},{"_id":"public/archives/index.html","hash":"887e1044a84f3e8a1c4899bb35051e9d89a5e183","modified":1709089906320},{"_id":"public/archives/2023/index.html","hash":"1e72284099f35a82413bbd3009db74b4cbcfca41","modified":1709089906320},{"_id":"public/archives/2023/09/index.html","hash":"ecaf09177bfc78f28a11b50954271a1b00efb406","modified":1709089906320},{"_id":"public/archives/2024/index.html","hash":"e61121e4dd03aa9c4f44b6b20251ef21ff148827","modified":1709089906320},{"_id":"public/archives/2024/02/index.html","hash":"d5be93764b2ad50574f975114a3885f6b6e269ef","modified":1709089906320},{"_id":"public/categories/java基础/index.html","hash":"4279c75a2fca64685671ebfe9e09226960bb09e3","modified":1709089906320},{"_id":"public/categories/加密/index.html","hash":"42eab493cac9f87e86ab58f292508447c76c3346","modified":1709089906320},{"_id":"public/categories/网络/index.html","hash":"a0aadedada9afe57baf4a0e4efb44ddf014df157","modified":1709089906320},{"_id":"public/categories/redis持久化/index.html","hash":"26b97f06cc43bf3dd2f14a31df5856e7f54597e0","modified":1708596136554},{"_id":"public/categories/线程池/index.html","hash":"83735775e598a4d69ed6a34a665f0d70fd2245f8","modified":1708596136554},{"_id":"public/tags/文章/index.html","hash":"20f1b952dfa332cc0579d494f0c74b72def2e6de","modified":1709089906320},{"_id":"public/2024/02/21/redisPersistence/index.html","hash":"68c3d20a064d139447f5f7a1c296efa10a87f1ec","modified":1709089906320},{"_id":"public/2024/02/21/threadPool/index.html","hash":"8dceddbeeda4422a2e7ce8085225acd5d9ef5b59","modified":1709089906320},{"_id":"public/2024/02/18/ConcurrentHashMap/index.html","hash":"95e189dbf310121b036677fb97517d134dfa0bf6","modified":1709089906320},{"_id":"public/2023/09/16/encryptionTest/index.html","hash":"32edf3134029b30f257423fb34c6116774dab647","modified":1709089906320},{"_id":"public/index.html","hash":"d39434e8525506b8952251d8042f506b25e3564c","modified":1709089906320},{"_id":"public/tags/理论/index.html","hash":"9ec25034ae2437eeea9ee2737ae2c5a5a306792e","modified":1708596136554},{"_id":"public/images/photo.jpg","hash":"e406955da78ae0685d4596dff5bb3980b8481775","modified":1708596136554},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1708596136554},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1708596136554},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1708596136554},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1708596136554},{"_id":"public/css/hbe.style.css","hash":"72959894400fd5c350106cb558c39fa51f722cbd","modified":1708596136554},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1708596136554},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1708596136554},{"_id":"public/lib/hbe.js","hash":"fb05fcd82bb28d3b2887d388cabea7f9b1a318eb","modified":1708596136554},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1708596136554},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1708596136554},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1708596136554},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1708596136554},{"_id":"public/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1708596136554},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1708596136554},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1708596136554},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1708596136554},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1708596136554},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1708596136554},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1708596136554},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1708596136554},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1708596136554},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1708596136554},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1708596136554},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1708596136554},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1708596136554},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1708596136554},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1708596136554},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1708596136554},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1708596136554},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1708596136554},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1708596136554},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1708596136554},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1708596136554},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1708596136554},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1708596136554},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1708596136554},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1708596136554},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1708596136554},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1708596136554},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1708596136554},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1708596136554},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1708596136554},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1708596136554},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1708596136554},{"_id":"public/css/main.css","hash":"b8e90be739b31c2768403ef40ac8c9e2664a1553","modified":1708596136554},{"_id":"public/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1708596136554},{"_id":"public/categories/redis/index.html","hash":"0ae3ef655e8a72b011ff443529e0e374159ed51c","modified":1709089906320},{"_id":"public/categories/多线程/index.html","hash":"f59bc8fabd4f2e8c5b3f362b6e05f9f2a4fcb1b8","modified":1709089906320},{"_id":"public/tags/ConcurrentHashMap/index.html","hash":"16c04953562331d02a15f543a22d4b838380b93e","modified":1709089906320},{"_id":"public/tags/redis持久化/index.html","hash":"e2fcd01f6aa2543ab10b8eff9174535e7e92725b","modified":1709089906320},{"_id":"public/tags/TCP连接/index.html","hash":"9c07e1f4e82de92bfc9ed698580399ea42a01dea","modified":1709089906320},{"_id":"public/tags/线程池/index.html","hash":"74a2750244f64267a7df5cf5e6be6d08ef19f751","modified":1709089906320},{"_id":"source/_posts/instruct.md","hash":"78726407732d0098d9d55a273e05f1ce37b34c22","modified":1708668232220},{"_id":"source/_posts/thread.md","hash":"b970c1140c2b1c077ac6077a70dbd1d36ba86ecd","modified":1708686126859},{"_id":"public/tags/指令/index.html","hash":"c6b43be65b287e548788e16771743d42a5682b5c","modified":1709089906320},{"_id":"public/tags/线程的生命周期/index.html","hash":"b47542874815e355e1cc67731905dd1ea6b43109","modified":1709089906320},{"_id":"public/categories/线程/index.html","hash":"1a1b5ec7c7ae95b636addc6bc407df1c2639f5e9","modified":1709089906320},{"_id":"public/2024/02/23/thread/index.html","hash":"ed5631e3445ee851a6b14b75bbb9466823c697f6","modified":1709089906320},{"_id":"public/2023/09/16/instruct/index.html","hash":"e5da66e4c4342cdffe2c8ad867f26fa8af6a4469","modified":1709089906320},{"_id":"source/_posts/linuxOrder.md","hash":"e00e1918813d258aceabe7c2afa34759175f80da","modified":1709089883345},{"_id":"public/tags/Linux常用命令/index.html","hash":"98f008c20ea06604d01949d480cc36f73652a4a0","modified":1709089906320},{"_id":"public/categories/Linux/index.html","hash":"7a8906a57e9b134853dd662a9f2faec4265b4229","modified":1709089906320},{"_id":"public/2023/09/12/linuxOrder/index.html","hash":"7b2640f847af9a1507bb84b1f2852cce36915640","modified":1709089906320}],"Category":[{"name":"java基础","_id":"clsx20wz60004j8clag105db1"},{"name":"加密","_id":"clsx20wzd000cj8cl183r4axo"},{"name":"网络","_id":"clsx20wzh000jj8cldhdb7u2o"},{"name":"redis持久化","_id":"clsx20wzh000nj8clduet2aot"},{"name":"线程池","_id":"clsx20wzi000qj8clhzd23sfb"},{"name":"redis","_id":"clsy0vxf70001f8cldejn71a4"},{"name":"多线程","_id":"clsy0vxfa0004f8cl5udfe1vs"},{"name":"线程","_id":"clsy9j3kb0003x8clbrtp0zs3"},{"name":"Linux","_id":"clt5804en0001k4cle2n58py3"}],"Data":[],"Page":[{"title":"404","date":"2024-01-19T06:09:25.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2024-01-19 14:09:25\n---\n","updated":"2024-01-19T06:09:25.801Z","path":"404/index.html","comments":1,"layout":"page","_id":"clsx20wyx0000j8clfn7e0p2g","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","date":"2024-01-19T06:08:48.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: \"tags\"\ntype: tags\nlayout: \"tags\"\ndate: 2024-01-19 14:08:48\n---\n","updated":"2024-02-20T02:05:45.466Z","path":"tags/index.html","comments":1,"_id":"clsx20wz30002j8cl3h1x2ph9","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"about","type":"about","layout":"about","date":"2024-01-19T06:07:45.000Z","_content":"\n关于我\n\n","source":"about/index.md","raw":"---\ntitle: \"about\"\ntype: about\nlayout: \"about\"\ndate: 2024-01-19 14:07:45\n---\n\n关于我\n\n","updated":"2024-02-20T02:09:59.252Z","path":"about/index.html","comments":1,"_id":"clsx20wza0006j8clfjka1jqs","content":"<p>关于我</p>\n","site":{"data":{}},"length":3,"excerpt":"","more":"<p>关于我</p>\n"},{"title":"categories","type":"categories","layout":"categories","date":"2024-01-19T06:08:39.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: \"categories\"\ntype: categories\nlayout: \"categories\"\ndate: 2024-01-19 14:08:39\n---\n","updated":"2024-02-20T02:07:31.573Z","path":"categories/index.html","comments":1,"_id":"clsx20wzb0008j8cl2twz6h7b","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"schedule","type":"schedule","layout":"schedule","date":"2024-01-19T06:08:48.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: \"schedule\"\ntype: schedule\nlayout: \"schedule\"\ndate: 2024-01-19 14:08:48\n---\n","updated":"2024-02-20T02:08:44.546Z","path":"schedule/index.html","comments":1,"_id":"clsx20wzc000aj8clgpn75eaz","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"sitemap.xml","date":"2024-01-19T06:09:10.000Z","_content":"","source":"sitemap-xml/index.md","raw":"---\ntitle: sitemap.xml\ndate: 2024-01-19 14:09:10\n---\n","updated":"2024-01-19T06:09:10.467Z","path":"sitemap-xml/index.html","comments":1,"layout":"page","_id":"clsx20wzf000fj8cl3p7lf3ij","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"一文读懂 ConcurrentHashMap 原理","date":"2024-02-18T04:54:28.000Z","_content":"\n\n\n**出现背景**\n\n#### 1、线程不安全的HashMap\n\n- 非原子操作：`HashMap`的操作不是原子性的，例如put()方法涉及到了多个步骤，包括计算hash值，查找或插入元素等，如果多个线程同时执行这些操作，就有可能导致数据不一致的情况。\n- 容量扩容，`HashMap`在扩容时，需要重新计算元素的hash值并分配存储位置，这个过程涉及到对原数组进行复制和重新插入元素的操作。如果在扩容期间有其他线程对`HashMap`进行并发修改，就可能导致数据丢失或出现异常\n\n#### 2、效率低下的HashTable\n\n`HashTable`容器使用`synchronized`来保证线程安全，但在线程竞争激烈的情况下`HashTable`的效率非常低，因为当一个线程正在访问`HashTable`的同步方法时，这时，另外一个线程也来访问`HashTable`的同步方法， 可能会进入阻塞和轮询状态。如线程A使用put进行添加元素的时候，线程B不但不能使用put方法添加元素，而且不能使用get方法获取元素，所以竞争越激烈效率越低，也就是说对于`HashTable`而言，`synchronized`是针对Hash整张表的，即每次锁住整张表让线程独占，相当于所有线程进行读写的时候都去竞争一把锁。\n\n#### ConcurrentHashMap的锁分段技术\n\n锁分段技术就是将数据分成一段一段的储存，然后给每一段数据分配一把锁，当一个线程占用锁访问一个段数据时，其他的段数据也是可以被其他线程访问的，另外，`ConcurrentHsahMap`是可以做到读取数据不加锁\n\n`ConcurrentHashMap`是由`Segment`数据结构和`HashEntry`数据结构组成，`Segment`是一种可重入锁`ReentrantLock`，在`ConcurrentHashMap`中扮演锁的角色，`HashEntry`则用于存储键值对数据，一个`ConcurrentHashMap`中包含一个`Segment`数组，`Segment`结构和`HashMap`类似，是一种数组和链表结构，一个`Segment`里包含一个`HashEntry`数组，每个`HashEntry`是一个链表结构的元素，每个`Segment`守护着一个`HashEntry`数组里的元素，当对`HashEntry`数组中的数据进行修改时，必须先获得它对应的`Segment`锁\n\n##### Segment\n\n##### 我们再来具体了解一下Segment的数据结构\n\n```java\nstatic final class Segment<K,V> extends ReentrantLock implements Serializable { \n    transient volatile int count; \n    transient int modCount; \n    transient int threshold; \n    transient volatile HashEntry<K,V>[] table; \n    final float loadFactor; \n}\n\n```\n\n以下时是Segment里面成员变量的意义：\n\n- count：Segment中元素的数量\n- modCount：对table的大小造成影响的操作的数量（比如put或者remove操作）\n- threshold：阈值，Segment里面元素的数量超过这个值依旧就会对Segment进行扩容\n- table：链表数组，数组中的每一个元素代表了一个链表的头部\n- loadFactor：负载因子，用于确定threshold\n\ncount用来统计该段数据的个数，它是volatile变量，它用来协调修改和读取操作，以保证读取操作能够读取到几乎最新修改的值，协调方法是这样的，每次修改操作做了结构上的变化，如增加/删除节点（修改节点的值不算结构上的变化），都要写count值，每次读取操作开始都要读取count的值。这利用了Java5中对volatile语义的增强，对同一个volatile变量的写和读存在happens-begore关系。modCount统计段数据改变的次数，主要为了检测对多个段进行遍历过程中某个段是否发生改变。threashold用来表示需要进行rehash的界限值。 table数组存储段中节点，每个数组是个hash链，用HashEntry表示。table也是volatile，这使得能够读取到最新的table值而不需要同步。loadFactor表示负载因子。\n\n##### **HashEntry**\n\nSegment中的元素是以HashEntry的形式存放在链表数组中的，看一下HashEntry的结构：\n\n```java\nstatic final class HashEntry<K,V> { \n    final K key; \n    final int hash; \n    volatile V value; \n    final HashEntry<K,V> next; \n}\n\n```\n\n可以看到`HashEntry`的一个特点，除了value外，其他的几个变量都是final修饰的，这意味着不能从hash链表的尾部和中部进行添加或删除节点，因为这需要修改next引用值，所有的节点的修改只能从头部开始。对于put操作，可以一律添加到hash链表的头部。但是对于remove操作，可能需要从中间删除一个节点，这时候就需要把将要删除的节点的前面的节点都复制一遍，最后一个节点指向要删除的节点的下一个节点。为了确保读操作能看到最新的值，将value设置为`volatile`，这避免了加锁。\n\n#### ConcurrentHashMap JDK1.8与JDK1.7的区别\n\nJDK1.8 中 `ConcurrentHashMap` 类取消了 `Segment `分段锁，采用 `CAS `+ `synchronized `来保证并发安全，数据结构跟 jdk1.8 中 `HashMap `结构类似，都是**数组 + 链表(当链表长度大于8时，链表结构转为红黑二叉树**)结构。`ConcurrentHashMap` 中 `synchronized` 只锁定当前链表或红黑二叉树的首节点，只要节点 hash 不冲突，就不会产生并发，相比 JDK1.7 的 `ConcurrentHashMap` 效率又提升了 N 倍！\n\n#### ConcurrentHashMap的初始化\n\n我们结合一下源码来分析一下ConcurrentHashMap的实现，先看初始化方法。\n\n```java\npublic ConcurrentHashMap(int initialCapacity, \n                         float loadFactor, int concurrencyLevel) { \n    if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0) \n        throw new IllegalArgumentException(); \n    if (concurrencyLevel > MAX_SEGMENTS) \n        concurrencyLevel = MAX_SEGMENTS; \n    // Find power-of-two sizes best matching arguments \n    int sshift = 0; \n    int ssize = 1; \n    while (ssize < concurrencyLevel) { \n        ++sshift; \n        ssize <<= 1; \n    } \n    segmentShift = 32 - sshift; \n    segmentMask = ssize - 1; \n    this.segments = Segment.newArray(ssize); \n    if (initialCapacity > MAXIMUM_CAPACITY) \n        initialCapacity = MAXIMUM_CAPACITY; \n    int c = initialCapacity / ssize; \n    if (c * ssize < initialCapacity) \n        ++c; \n    int cap = 1; \n    while (cap < c) \n        cap <<= 1; \n    for (int i = 0; i < this.segments.length; ++i) \n        this.segments[i] = new Segment<K,V>(cap, loadFactor); \n}\n\n```\n\n\n\n`CurrentHashMap`的初始化一共有三个参数，一个`initialCapacity`，表示初始的容量，一个`loadFactor`，表示负载参数，最后一个是`concurrentLevel`，代表`ConcurrentHashMap`内部`Segment`的数量，`ConcurrentLevel`一经指定，不可该变，后续如果`ConcurrentHashMap`的元素数量增加导致`ConcurrentHashMap`需要扩容，`ConcurrentHashMap`不会增加`Segment`的数量，只会增加`Segment`中链表数组的容量，这样扩容的好处是不需要对`ConcurrentHashMap`中所有的元素做rehash，只需要对`Segment`中的元素做一次rehash就可以了。\n\n默认初始表的容量，必须是2的幂（至少为1），最大为16.\n\n\n\n#### ConcurrentHashMap的get操作\n\n在java8中，`concurrentHashMap`的get操作是不需要加锁的。\n\n`concurrentHashMap`的设计目标是支持高并发操作，所以在实现中，尽可能地减少锁的使用。在java8中，为了提高并发性能，`concurrentHashMap`使用node数组和链表/红黑树 ，而且get操作完全无锁。\n\nget方法主要是通过`volatile`关键字和`Unsafe`类来保证的，在`ConcurrentHashMap`中，Node数组和Node节点的value字段都是用`volatile`关键字修饰的，这可以保证线程间的可见性， 也就是说当一个线程修改了数据，其他线程可以立即看到修改后的值，另外，Unsafe类提供了一种低级别的，直接操作内存的方式，可以用来实现无锁的并发操作。\n\n\n\n##### volatile\n\n`volatile`是Java中的一个关键字，它用于修饰变量，当一个变量被`volatile`修饰后，它保证了以下两个主要特征：\n\n- 可见性：当一个线程修改了一个`volatile`变量的值，其他线程可以立即看到这个修改，这是因为volatile变量的读写都会直接操作主内存，而不是CPU缓存，从而保证了在多线程环境下的数据一致性\n- 有序性：`volatile`关键字禁止指令重排序优化。也就是说，对`volatile`变量的读写操作，都会按照代码执行顺序进行。\n\n##### unsafe\n\n在Java中，`Unsafe`是一个类，全名为`sun.misc.Unsafe`。这个类提供了一些可以直接操作内存和线程的底层方法，因此使用它可以进行一些非常底层的操作，比如直接访问和修改对象的字段，甚至是没有被`public`修饰的字段。\n\n以下是一些`Unsafe`类提供的方法的例子：\n\n- `allocateMemory`、`freeMemory`和`reallocateMemory`：可以直接分配、释放和重新分配内存，就像C语言的`malloc`、`free`和`realloc`函数一样。\n- `putInt`、`getInt`等：可以直接读写内存。\n- `compareAndSwapInt`、`compareAndSwapLong`等：可以进行原子操作。\n- `park`和`unpark`：可以挂起和恢复线程。\n\n虽然`Unsafe`类提供了强大的功能，但是它的使用是有风险的，因为不正确的使用可能会导致程序崩溃，或者产生难以调试的问题。因此，`Unsafe`类并不是公开的API，它主要是为Java的核心类库提供服务的。在应用程序中，我们应该尽量避免使用`Unsafe`类，而是使用更高级的、更安全的API。","source":"_posts/ConcurrentHashMap.md","raw":"---\ntitle: 一文读懂 ConcurrentHashMap 原理\ndate: 2024-02-18 12:54:28\ntags: \n - ConcurrentHashMap\ncategories: \n - java基础\n---\n\n\n\n**出现背景**\n\n#### 1、线程不安全的HashMap\n\n- 非原子操作：`HashMap`的操作不是原子性的，例如put()方法涉及到了多个步骤，包括计算hash值，查找或插入元素等，如果多个线程同时执行这些操作，就有可能导致数据不一致的情况。\n- 容量扩容，`HashMap`在扩容时，需要重新计算元素的hash值并分配存储位置，这个过程涉及到对原数组进行复制和重新插入元素的操作。如果在扩容期间有其他线程对`HashMap`进行并发修改，就可能导致数据丢失或出现异常\n\n#### 2、效率低下的HashTable\n\n`HashTable`容器使用`synchronized`来保证线程安全，但在线程竞争激烈的情况下`HashTable`的效率非常低，因为当一个线程正在访问`HashTable`的同步方法时，这时，另外一个线程也来访问`HashTable`的同步方法， 可能会进入阻塞和轮询状态。如线程A使用put进行添加元素的时候，线程B不但不能使用put方法添加元素，而且不能使用get方法获取元素，所以竞争越激烈效率越低，也就是说对于`HashTable`而言，`synchronized`是针对Hash整张表的，即每次锁住整张表让线程独占，相当于所有线程进行读写的时候都去竞争一把锁。\n\n#### ConcurrentHashMap的锁分段技术\n\n锁分段技术就是将数据分成一段一段的储存，然后给每一段数据分配一把锁，当一个线程占用锁访问一个段数据时，其他的段数据也是可以被其他线程访问的，另外，`ConcurrentHsahMap`是可以做到读取数据不加锁\n\n`ConcurrentHashMap`是由`Segment`数据结构和`HashEntry`数据结构组成，`Segment`是一种可重入锁`ReentrantLock`，在`ConcurrentHashMap`中扮演锁的角色，`HashEntry`则用于存储键值对数据，一个`ConcurrentHashMap`中包含一个`Segment`数组，`Segment`结构和`HashMap`类似，是一种数组和链表结构，一个`Segment`里包含一个`HashEntry`数组，每个`HashEntry`是一个链表结构的元素，每个`Segment`守护着一个`HashEntry`数组里的元素，当对`HashEntry`数组中的数据进行修改时，必须先获得它对应的`Segment`锁\n\n##### Segment\n\n##### 我们再来具体了解一下Segment的数据结构\n\n```java\nstatic final class Segment<K,V> extends ReentrantLock implements Serializable { \n    transient volatile int count; \n    transient int modCount; \n    transient int threshold; \n    transient volatile HashEntry<K,V>[] table; \n    final float loadFactor; \n}\n\n```\n\n以下时是Segment里面成员变量的意义：\n\n- count：Segment中元素的数量\n- modCount：对table的大小造成影响的操作的数量（比如put或者remove操作）\n- threshold：阈值，Segment里面元素的数量超过这个值依旧就会对Segment进行扩容\n- table：链表数组，数组中的每一个元素代表了一个链表的头部\n- loadFactor：负载因子，用于确定threshold\n\ncount用来统计该段数据的个数，它是volatile变量，它用来协调修改和读取操作，以保证读取操作能够读取到几乎最新修改的值，协调方法是这样的，每次修改操作做了结构上的变化，如增加/删除节点（修改节点的值不算结构上的变化），都要写count值，每次读取操作开始都要读取count的值。这利用了Java5中对volatile语义的增强，对同一个volatile变量的写和读存在happens-begore关系。modCount统计段数据改变的次数，主要为了检测对多个段进行遍历过程中某个段是否发生改变。threashold用来表示需要进行rehash的界限值。 table数组存储段中节点，每个数组是个hash链，用HashEntry表示。table也是volatile，这使得能够读取到最新的table值而不需要同步。loadFactor表示负载因子。\n\n##### **HashEntry**\n\nSegment中的元素是以HashEntry的形式存放在链表数组中的，看一下HashEntry的结构：\n\n```java\nstatic final class HashEntry<K,V> { \n    final K key; \n    final int hash; \n    volatile V value; \n    final HashEntry<K,V> next; \n}\n\n```\n\n可以看到`HashEntry`的一个特点，除了value外，其他的几个变量都是final修饰的，这意味着不能从hash链表的尾部和中部进行添加或删除节点，因为这需要修改next引用值，所有的节点的修改只能从头部开始。对于put操作，可以一律添加到hash链表的头部。但是对于remove操作，可能需要从中间删除一个节点，这时候就需要把将要删除的节点的前面的节点都复制一遍，最后一个节点指向要删除的节点的下一个节点。为了确保读操作能看到最新的值，将value设置为`volatile`，这避免了加锁。\n\n#### ConcurrentHashMap JDK1.8与JDK1.7的区别\n\nJDK1.8 中 `ConcurrentHashMap` 类取消了 `Segment `分段锁，采用 `CAS `+ `synchronized `来保证并发安全，数据结构跟 jdk1.8 中 `HashMap `结构类似，都是**数组 + 链表(当链表长度大于8时，链表结构转为红黑二叉树**)结构。`ConcurrentHashMap` 中 `synchronized` 只锁定当前链表或红黑二叉树的首节点，只要节点 hash 不冲突，就不会产生并发，相比 JDK1.7 的 `ConcurrentHashMap` 效率又提升了 N 倍！\n\n#### ConcurrentHashMap的初始化\n\n我们结合一下源码来分析一下ConcurrentHashMap的实现，先看初始化方法。\n\n```java\npublic ConcurrentHashMap(int initialCapacity, \n                         float loadFactor, int concurrencyLevel) { \n    if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0) \n        throw new IllegalArgumentException(); \n    if (concurrencyLevel > MAX_SEGMENTS) \n        concurrencyLevel = MAX_SEGMENTS; \n    // Find power-of-two sizes best matching arguments \n    int sshift = 0; \n    int ssize = 1; \n    while (ssize < concurrencyLevel) { \n        ++sshift; \n        ssize <<= 1; \n    } \n    segmentShift = 32 - sshift; \n    segmentMask = ssize - 1; \n    this.segments = Segment.newArray(ssize); \n    if (initialCapacity > MAXIMUM_CAPACITY) \n        initialCapacity = MAXIMUM_CAPACITY; \n    int c = initialCapacity / ssize; \n    if (c * ssize < initialCapacity) \n        ++c; \n    int cap = 1; \n    while (cap < c) \n        cap <<= 1; \n    for (int i = 0; i < this.segments.length; ++i) \n        this.segments[i] = new Segment<K,V>(cap, loadFactor); \n}\n\n```\n\n\n\n`CurrentHashMap`的初始化一共有三个参数，一个`initialCapacity`，表示初始的容量，一个`loadFactor`，表示负载参数，最后一个是`concurrentLevel`，代表`ConcurrentHashMap`内部`Segment`的数量，`ConcurrentLevel`一经指定，不可该变，后续如果`ConcurrentHashMap`的元素数量增加导致`ConcurrentHashMap`需要扩容，`ConcurrentHashMap`不会增加`Segment`的数量，只会增加`Segment`中链表数组的容量，这样扩容的好处是不需要对`ConcurrentHashMap`中所有的元素做rehash，只需要对`Segment`中的元素做一次rehash就可以了。\n\n默认初始表的容量，必须是2的幂（至少为1），最大为16.\n\n\n\n#### ConcurrentHashMap的get操作\n\n在java8中，`concurrentHashMap`的get操作是不需要加锁的。\n\n`concurrentHashMap`的设计目标是支持高并发操作，所以在实现中，尽可能地减少锁的使用。在java8中，为了提高并发性能，`concurrentHashMap`使用node数组和链表/红黑树 ，而且get操作完全无锁。\n\nget方法主要是通过`volatile`关键字和`Unsafe`类来保证的，在`ConcurrentHashMap`中，Node数组和Node节点的value字段都是用`volatile`关键字修饰的，这可以保证线程间的可见性， 也就是说当一个线程修改了数据，其他线程可以立即看到修改后的值，另外，Unsafe类提供了一种低级别的，直接操作内存的方式，可以用来实现无锁的并发操作。\n\n\n\n##### volatile\n\n`volatile`是Java中的一个关键字，它用于修饰变量，当一个变量被`volatile`修饰后，它保证了以下两个主要特征：\n\n- 可见性：当一个线程修改了一个`volatile`变量的值，其他线程可以立即看到这个修改，这是因为volatile变量的读写都会直接操作主内存，而不是CPU缓存，从而保证了在多线程环境下的数据一致性\n- 有序性：`volatile`关键字禁止指令重排序优化。也就是说，对`volatile`变量的读写操作，都会按照代码执行顺序进行。\n\n##### unsafe\n\n在Java中，`Unsafe`是一个类，全名为`sun.misc.Unsafe`。这个类提供了一些可以直接操作内存和线程的底层方法，因此使用它可以进行一些非常底层的操作，比如直接访问和修改对象的字段，甚至是没有被`public`修饰的字段。\n\n以下是一些`Unsafe`类提供的方法的例子：\n\n- `allocateMemory`、`freeMemory`和`reallocateMemory`：可以直接分配、释放和重新分配内存，就像C语言的`malloc`、`free`和`realloc`函数一样。\n- `putInt`、`getInt`等：可以直接读写内存。\n- `compareAndSwapInt`、`compareAndSwapLong`等：可以进行原子操作。\n- `park`和`unpark`：可以挂起和恢复线程。\n\n虽然`Unsafe`类提供了强大的功能，但是它的使用是有风险的，因为不正确的使用可能会导致程序崩溃，或者产生难以调试的问题。因此，`Unsafe`类并不是公开的API，它主要是为Java的核心类库提供服务的。在应用程序中，我们应该尽量避免使用`Unsafe`类，而是使用更高级的、更安全的API。","slug":"ConcurrentHashMap","published":1,"updated":"2024-02-23T02:12:15.485Z","_id":"clsx20wz00001j8cl21vo5bh5","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>出现背景</strong></p>\n<h4 id=\"1、线程不安全的HashMap\"><a href=\"#1、线程不安全的HashMap\" class=\"headerlink\" title=\"1、线程不安全的HashMap\"></a>1、线程不安全的HashMap</h4><ul>\n<li>非原子操作：<code>HashMap</code>的操作不是原子性的，例如put()方法涉及到了多个步骤，包括计算hash值，查找或插入元素等，如果多个线程同时执行这些操作，就有可能导致数据不一致的情况。</li>\n<li>容量扩容，<code>HashMap</code>在扩容时，需要重新计算元素的hash值并分配存储位置，这个过程涉及到对原数组进行复制和重新插入元素的操作。如果在扩容期间有其他线程对<code>HashMap</code>进行并发修改，就可能导致数据丢失或出现异常</li>\n</ul>\n<h4 id=\"2、效率低下的HashTable\"><a href=\"#2、效率低下的HashTable\" class=\"headerlink\" title=\"2、效率低下的HashTable\"></a>2、效率低下的HashTable</h4><p><code>HashTable</code>容器使用<code>synchronized</code>来保证线程安全，但在线程竞争激烈的情况下<code>HashTable</code>的效率非常低，因为当一个线程正在访问<code>HashTable</code>的同步方法时，这时，另外一个线程也来访问<code>HashTable</code>的同步方法， 可能会进入阻塞和轮询状态。如线程A使用put进行添加元素的时候，线程B不但不能使用put方法添加元素，而且不能使用get方法获取元素，所以竞争越激烈效率越低，也就是说对于<code>HashTable</code>而言，<code>synchronized</code>是针对Hash整张表的，即每次锁住整张表让线程独占，相当于所有线程进行读写的时候都去竞争一把锁。</p>\n<h4 id=\"ConcurrentHashMap的锁分段技术\"><a href=\"#ConcurrentHashMap的锁分段技术\" class=\"headerlink\" title=\"ConcurrentHashMap的锁分段技术\"></a>ConcurrentHashMap的锁分段技术</h4><p>锁分段技术就是将数据分成一段一段的储存，然后给每一段数据分配一把锁，当一个线程占用锁访问一个段数据时，其他的段数据也是可以被其他线程访问的，另外，<code>ConcurrentHsahMap</code>是可以做到读取数据不加锁</p>\n<p><code>ConcurrentHashMap</code>是由<code>Segment</code>数据结构和<code>HashEntry</code>数据结构组成，<code>Segment</code>是一种可重入锁<code>ReentrantLock</code>，在<code>ConcurrentHashMap</code>中扮演锁的角色，<code>HashEntry</code>则用于存储键值对数据，一个<code>ConcurrentHashMap</code>中包含一个<code>Segment</code>数组，<code>Segment</code>结构和<code>HashMap</code>类似，是一种数组和链表结构，一个<code>Segment</code>里包含一个<code>HashEntry</code>数组，每个<code>HashEntry</code>是一个链表结构的元素，每个<code>Segment</code>守护着一个<code>HashEntry</code>数组里的元素，当对<code>HashEntry</code>数组中的数据进行修改时，必须先获得它对应的<code>Segment</code>锁</p>\n<h5 id=\"Segment\"><a href=\"#Segment\" class=\"headerlink\" title=\"Segment\"></a>Segment</h5><h5 id=\"我们再来具体了解一下Segment的数据结构\"><a href=\"#我们再来具体了解一下Segment的数据结构\" class=\"headerlink\" title=\"我们再来具体了解一下Segment的数据结构\"></a>我们再来具体了解一下Segment的数据结构</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Segment</span>&lt;K,V&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">ReentrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> count; </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"type\">int</span> modCount; </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"type\">int</span> threshold; </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> HashEntry&lt;K,V&gt;[] table; </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">float</span> loadFactor; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以下时是Segment里面成员变量的意义：</p>\n<ul>\n<li>count：Segment中元素的数量</li>\n<li>modCount：对table的大小造成影响的操作的数量（比如put或者remove操作）</li>\n<li>threshold：阈值，Segment里面元素的数量超过这个值依旧就会对Segment进行扩容</li>\n<li>table：链表数组，数组中的每一个元素代表了一个链表的头部</li>\n<li>loadFactor：负载因子，用于确定threshold</li>\n</ul>\n<p>count用来统计该段数据的个数，它是volatile变量，它用来协调修改和读取操作，以保证读取操作能够读取到几乎最新修改的值，协调方法是这样的，每次修改操作做了结构上的变化，如增加&#x2F;删除节点（修改节点的值不算结构上的变化），都要写count值，每次读取操作开始都要读取count的值。这利用了Java5中对volatile语义的增强，对同一个volatile变量的写和读存在happens-begore关系。modCount统计段数据改变的次数，主要为了检测对多个段进行遍历过程中某个段是否发生改变。threashold用来表示需要进行rehash的界限值。 table数组存储段中节点，每个数组是个hash链，用HashEntry表示。table也是volatile，这使得能够读取到最新的table值而不需要同步。loadFactor表示负载因子。</p>\n<h5 id=\"HashEntry\"><a href=\"#HashEntry\" class=\"headerlink\" title=\"HashEntry\"></a><strong>HashEntry</strong></h5><p>Segment中的元素是以HashEntry的形式存放在链表数组中的，看一下HashEntry的结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HashEntry</span>&lt;K,V&gt; &#123; </span><br><span class=\"line\">    <span class=\"keyword\">final</span> K key; </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> hash; </span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> V value; </span><br><span class=\"line\">    <span class=\"keyword\">final</span> HashEntry&lt;K,V&gt; next; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>HashEntry</code>的一个特点，除了value外，其他的几个变量都是final修饰的，这意味着不能从hash链表的尾部和中部进行添加或删除节点，因为这需要修改next引用值，所有的节点的修改只能从头部开始。对于put操作，可以一律添加到hash链表的头部。但是对于remove操作，可能需要从中间删除一个节点，这时候就需要把将要删除的节点的前面的节点都复制一遍，最后一个节点指向要删除的节点的下一个节点。为了确保读操作能看到最新的值，将value设置为<code>volatile</code>，这避免了加锁。</p>\n<h4 id=\"ConcurrentHashMap-JDK1-8与JDK1-7的区别\"><a href=\"#ConcurrentHashMap-JDK1-8与JDK1-7的区别\" class=\"headerlink\" title=\"ConcurrentHashMap JDK1.8与JDK1.7的区别\"></a>ConcurrentHashMap JDK1.8与JDK1.7的区别</h4><p>JDK1.8 中 <code>ConcurrentHashMap</code> 类取消了 <code>Segment </code>分段锁，采用 <code>CAS </code>+ <code>synchronized </code>来保证并发安全，数据结构跟 jdk1.8 中 <code>HashMap </code>结构类似，都是<strong>数组 + 链表(当链表长度大于8时，链表结构转为红黑二叉树</strong>)结构。<code>ConcurrentHashMap</code> 中 <code>synchronized</code> 只锁定当前链表或红黑二叉树的首节点，只要节点 hash 不冲突，就不会产生并发，相比 JDK1.7 的 <code>ConcurrentHashMap</code> 效率又提升了 N 倍！</p>\n<h4 id=\"ConcurrentHashMap的初始化\"><a href=\"#ConcurrentHashMap的初始化\" class=\"headerlink\" title=\"ConcurrentHashMap的初始化\"></a>ConcurrentHashMap的初始化</h4><p>我们结合一下源码来分析一下ConcurrentHashMap的实现，先看初始化方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ConcurrentHashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity, </span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"type\">float</span> loadFactor, <span class=\"type\">int</span> concurrencyLevel)</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(loadFactor &gt; <span class=\"number\">0</span>) || initialCapacity &lt; <span class=\"number\">0</span> || concurrencyLevel &lt;= <span class=\"number\">0</span>) </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (concurrencyLevel &gt; MAX_SEGMENTS) </span><br><span class=\"line\">        concurrencyLevel = MAX_SEGMENTS; </span><br><span class=\"line\">    <span class=\"comment\">// Find power-of-two sizes best matching arguments </span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sshift</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ssize</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ssize &lt; concurrencyLevel) &#123; </span><br><span class=\"line\">        ++sshift; </span><br><span class=\"line\">        ssize &lt;&lt;= <span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    segmentShift = <span class=\"number\">32</span> - sshift; </span><br><span class=\"line\">    segmentMask = ssize - <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.segments = Segment.newArray(ssize); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY) </span><br><span class=\"line\">        initialCapacity = MAXIMUM_CAPACITY; </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> initialCapacity / ssize; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c * ssize &lt; initialCapacity) </span><br><span class=\"line\">        ++c; </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cap &lt; c) </span><br><span class=\"line\">        cap &lt;&lt;= <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">this</span>.segments.length; ++i) </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.segments[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Segment</span>&lt;K,V&gt;(cap, loadFactor); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>CurrentHashMap</code>的初始化一共有三个参数，一个<code>initialCapacity</code>，表示初始的容量，一个<code>loadFactor</code>，表示负载参数，最后一个是<code>concurrentLevel</code>，代表<code>ConcurrentHashMap</code>内部<code>Segment</code>的数量，<code>ConcurrentLevel</code>一经指定，不可该变，后续如果<code>ConcurrentHashMap</code>的元素数量增加导致<code>ConcurrentHashMap</code>需要扩容，<code>ConcurrentHashMap</code>不会增加<code>Segment</code>的数量，只会增加<code>Segment</code>中链表数组的容量，这样扩容的好处是不需要对<code>ConcurrentHashMap</code>中所有的元素做rehash，只需要对<code>Segment</code>中的元素做一次rehash就可以了。</p>\n<p>默认初始表的容量，必须是2的幂（至少为1），最大为16.</p>\n<h4 id=\"ConcurrentHashMap的get操作\"><a href=\"#ConcurrentHashMap的get操作\" class=\"headerlink\" title=\"ConcurrentHashMap的get操作\"></a>ConcurrentHashMap的get操作</h4><p>在java8中，<code>concurrentHashMap</code>的get操作是不需要加锁的。</p>\n<p><code>concurrentHashMap</code>的设计目标是支持高并发操作，所以在实现中，尽可能地减少锁的使用。在java8中，为了提高并发性能，<code>concurrentHashMap</code>使用node数组和链表&#x2F;红黑树 ，而且get操作完全无锁。</p>\n<p>get方法主要是通过<code>volatile</code>关键字和<code>Unsafe</code>类来保证的，在<code>ConcurrentHashMap</code>中，Node数组和Node节点的value字段都是用<code>volatile</code>关键字修饰的，这可以保证线程间的可见性， 也就是说当一个线程修改了数据，其他线程可以立即看到修改后的值，另外，Unsafe类提供了一种低级别的，直接操作内存的方式，可以用来实现无锁的并发操作。</p>\n<h5 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h5><p><code>volatile</code>是Java中的一个关键字，它用于修饰变量，当一个变量被<code>volatile</code>修饰后，它保证了以下两个主要特征：</p>\n<ul>\n<li>可见性：当一个线程修改了一个<code>volatile</code>变量的值，其他线程可以立即看到这个修改，这是因为volatile变量的读写都会直接操作主内存，而不是CPU缓存，从而保证了在多线程环境下的数据一致性</li>\n<li>有序性：<code>volatile</code>关键字禁止指令重排序优化。也就是说，对<code>volatile</code>变量的读写操作，都会按照代码执行顺序进行。</li>\n</ul>\n<h5 id=\"unsafe\"><a href=\"#unsafe\" class=\"headerlink\" title=\"unsafe\"></a>unsafe</h5><p>在Java中，<code>Unsafe</code>是一个类，全名为<code>sun.misc.Unsafe</code>。这个类提供了一些可以直接操作内存和线程的底层方法，因此使用它可以进行一些非常底层的操作，比如直接访问和修改对象的字段，甚至是没有被<code>public</code>修饰的字段。</p>\n<p>以下是一些<code>Unsafe</code>类提供的方法的例子：</p>\n<ul>\n<li><code>allocateMemory</code>、<code>freeMemory</code>和<code>reallocateMemory</code>：可以直接分配、释放和重新分配内存，就像C语言的<code>malloc</code>、<code>free</code>和<code>realloc</code>函数一样。</li>\n<li><code>putInt</code>、<code>getInt</code>等：可以直接读写内存。</li>\n<li><code>compareAndSwapInt</code>、<code>compareAndSwapLong</code>等：可以进行原子操作。</li>\n<li><code>park</code>和<code>unpark</code>：可以挂起和恢复线程。</li>\n</ul>\n<p>虽然<code>Unsafe</code>类提供了强大的功能，但是它的使用是有风险的，因为不正确的使用可能会导致程序崩溃，或者产生难以调试的问题。因此，<code>Unsafe</code>类并不是公开的API，它主要是为Java的核心类库提供服务的。在应用程序中，我们应该尽量避免使用<code>Unsafe</code>类，而是使用更高级的、更安全的API。</p>\n","site":{"data":{}},"length":4709,"excerpt":"","more":"<p><strong>出现背景</strong></p>\n<h4 id=\"1、线程不安全的HashMap\"><a href=\"#1、线程不安全的HashMap\" class=\"headerlink\" title=\"1、线程不安全的HashMap\"></a>1、线程不安全的HashMap</h4><ul>\n<li>非原子操作：<code>HashMap</code>的操作不是原子性的，例如put()方法涉及到了多个步骤，包括计算hash值，查找或插入元素等，如果多个线程同时执行这些操作，就有可能导致数据不一致的情况。</li>\n<li>容量扩容，<code>HashMap</code>在扩容时，需要重新计算元素的hash值并分配存储位置，这个过程涉及到对原数组进行复制和重新插入元素的操作。如果在扩容期间有其他线程对<code>HashMap</code>进行并发修改，就可能导致数据丢失或出现异常</li>\n</ul>\n<h4 id=\"2、效率低下的HashTable\"><a href=\"#2、效率低下的HashTable\" class=\"headerlink\" title=\"2、效率低下的HashTable\"></a>2、效率低下的HashTable</h4><p><code>HashTable</code>容器使用<code>synchronized</code>来保证线程安全，但在线程竞争激烈的情况下<code>HashTable</code>的效率非常低，因为当一个线程正在访问<code>HashTable</code>的同步方法时，这时，另外一个线程也来访问<code>HashTable</code>的同步方法， 可能会进入阻塞和轮询状态。如线程A使用put进行添加元素的时候，线程B不但不能使用put方法添加元素，而且不能使用get方法获取元素，所以竞争越激烈效率越低，也就是说对于<code>HashTable</code>而言，<code>synchronized</code>是针对Hash整张表的，即每次锁住整张表让线程独占，相当于所有线程进行读写的时候都去竞争一把锁。</p>\n<h4 id=\"ConcurrentHashMap的锁分段技术\"><a href=\"#ConcurrentHashMap的锁分段技术\" class=\"headerlink\" title=\"ConcurrentHashMap的锁分段技术\"></a>ConcurrentHashMap的锁分段技术</h4><p>锁分段技术就是将数据分成一段一段的储存，然后给每一段数据分配一把锁，当一个线程占用锁访问一个段数据时，其他的段数据也是可以被其他线程访问的，另外，<code>ConcurrentHsahMap</code>是可以做到读取数据不加锁</p>\n<p><code>ConcurrentHashMap</code>是由<code>Segment</code>数据结构和<code>HashEntry</code>数据结构组成，<code>Segment</code>是一种可重入锁<code>ReentrantLock</code>，在<code>ConcurrentHashMap</code>中扮演锁的角色，<code>HashEntry</code>则用于存储键值对数据，一个<code>ConcurrentHashMap</code>中包含一个<code>Segment</code>数组，<code>Segment</code>结构和<code>HashMap</code>类似，是一种数组和链表结构，一个<code>Segment</code>里包含一个<code>HashEntry</code>数组，每个<code>HashEntry</code>是一个链表结构的元素，每个<code>Segment</code>守护着一个<code>HashEntry</code>数组里的元素，当对<code>HashEntry</code>数组中的数据进行修改时，必须先获得它对应的<code>Segment</code>锁</p>\n<h5 id=\"Segment\"><a href=\"#Segment\" class=\"headerlink\" title=\"Segment\"></a>Segment</h5><h5 id=\"我们再来具体了解一下Segment的数据结构\"><a href=\"#我们再来具体了解一下Segment的数据结构\" class=\"headerlink\" title=\"我们再来具体了解一下Segment的数据结构\"></a>我们再来具体了解一下Segment的数据结构</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Segment</span>&lt;K,V&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">ReentrantLock</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> <span class=\"type\">int</span> count; </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"type\">int</span> modCount; </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"type\">int</span> threshold; </span><br><span class=\"line\">    <span class=\"keyword\">transient</span> <span class=\"keyword\">volatile</span> HashEntry&lt;K,V&gt;[] table; </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">float</span> loadFactor; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>以下时是Segment里面成员变量的意义：</p>\n<ul>\n<li>count：Segment中元素的数量</li>\n<li>modCount：对table的大小造成影响的操作的数量（比如put或者remove操作）</li>\n<li>threshold：阈值，Segment里面元素的数量超过这个值依旧就会对Segment进行扩容</li>\n<li>table：链表数组，数组中的每一个元素代表了一个链表的头部</li>\n<li>loadFactor：负载因子，用于确定threshold</li>\n</ul>\n<p>count用来统计该段数据的个数，它是volatile变量，它用来协调修改和读取操作，以保证读取操作能够读取到几乎最新修改的值，协调方法是这样的，每次修改操作做了结构上的变化，如增加&#x2F;删除节点（修改节点的值不算结构上的变化），都要写count值，每次读取操作开始都要读取count的值。这利用了Java5中对volatile语义的增强，对同一个volatile变量的写和读存在happens-begore关系。modCount统计段数据改变的次数，主要为了检测对多个段进行遍历过程中某个段是否发生改变。threashold用来表示需要进行rehash的界限值。 table数组存储段中节点，每个数组是个hash链，用HashEntry表示。table也是volatile，这使得能够读取到最新的table值而不需要同步。loadFactor表示负载因子。</p>\n<h5 id=\"HashEntry\"><a href=\"#HashEntry\" class=\"headerlink\" title=\"HashEntry\"></a><strong>HashEntry</strong></h5><p>Segment中的元素是以HashEntry的形式存放在链表数组中的，看一下HashEntry的结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HashEntry</span>&lt;K,V&gt; &#123; </span><br><span class=\"line\">    <span class=\"keyword\">final</span> K key; </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> hash; </span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> V value; </span><br><span class=\"line\">    <span class=\"keyword\">final</span> HashEntry&lt;K,V&gt; next; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>HashEntry</code>的一个特点，除了value外，其他的几个变量都是final修饰的，这意味着不能从hash链表的尾部和中部进行添加或删除节点，因为这需要修改next引用值，所有的节点的修改只能从头部开始。对于put操作，可以一律添加到hash链表的头部。但是对于remove操作，可能需要从中间删除一个节点，这时候就需要把将要删除的节点的前面的节点都复制一遍，最后一个节点指向要删除的节点的下一个节点。为了确保读操作能看到最新的值，将value设置为<code>volatile</code>，这避免了加锁。</p>\n<h4 id=\"ConcurrentHashMap-JDK1-8与JDK1-7的区别\"><a href=\"#ConcurrentHashMap-JDK1-8与JDK1-7的区别\" class=\"headerlink\" title=\"ConcurrentHashMap JDK1.8与JDK1.7的区别\"></a>ConcurrentHashMap JDK1.8与JDK1.7的区别</h4><p>JDK1.8 中 <code>ConcurrentHashMap</code> 类取消了 <code>Segment </code>分段锁，采用 <code>CAS </code>+ <code>synchronized </code>来保证并发安全，数据结构跟 jdk1.8 中 <code>HashMap </code>结构类似，都是<strong>数组 + 链表(当链表长度大于8时，链表结构转为红黑二叉树</strong>)结构。<code>ConcurrentHashMap</code> 中 <code>synchronized</code> 只锁定当前链表或红黑二叉树的首节点，只要节点 hash 不冲突，就不会产生并发，相比 JDK1.7 的 <code>ConcurrentHashMap</code> 效率又提升了 N 倍！</p>\n<h4 id=\"ConcurrentHashMap的初始化\"><a href=\"#ConcurrentHashMap的初始化\" class=\"headerlink\" title=\"ConcurrentHashMap的初始化\"></a>ConcurrentHashMap的初始化</h4><p>我们结合一下源码来分析一下ConcurrentHashMap的实现，先看初始化方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ConcurrentHashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity, </span></span><br><span class=\"line\"><span class=\"params\">                         <span class=\"type\">float</span> loadFactor, <span class=\"type\">int</span> concurrencyLevel)</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(loadFactor &gt; <span class=\"number\">0</span>) || initialCapacity &lt; <span class=\"number\">0</span> || concurrencyLevel &lt;= <span class=\"number\">0</span>) </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (concurrencyLevel &gt; MAX_SEGMENTS) </span><br><span class=\"line\">        concurrencyLevel = MAX_SEGMENTS; </span><br><span class=\"line\">    <span class=\"comment\">// Find power-of-two sizes best matching arguments </span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sshift</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ssize</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ssize &lt; concurrencyLevel) &#123; </span><br><span class=\"line\">        ++sshift; </span><br><span class=\"line\">        ssize &lt;&lt;= <span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    segmentShift = <span class=\"number\">32</span> - sshift; </span><br><span class=\"line\">    segmentMask = ssize - <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.segments = Segment.newArray(ssize); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY) </span><br><span class=\"line\">        initialCapacity = MAXIMUM_CAPACITY; </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> initialCapacity / ssize; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c * ssize &lt; initialCapacity) </span><br><span class=\"line\">        ++c; </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">cap</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cap &lt; c) </span><br><span class=\"line\">        cap &lt;&lt;= <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">this</span>.segments.length; ++i) </span><br><span class=\"line\">        <span class=\"built_in\">this</span>.segments[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Segment</span>&lt;K,V&gt;(cap, loadFactor); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>CurrentHashMap</code>的初始化一共有三个参数，一个<code>initialCapacity</code>，表示初始的容量，一个<code>loadFactor</code>，表示负载参数，最后一个是<code>concurrentLevel</code>，代表<code>ConcurrentHashMap</code>内部<code>Segment</code>的数量，<code>ConcurrentLevel</code>一经指定，不可该变，后续如果<code>ConcurrentHashMap</code>的元素数量增加导致<code>ConcurrentHashMap</code>需要扩容，<code>ConcurrentHashMap</code>不会增加<code>Segment</code>的数量，只会增加<code>Segment</code>中链表数组的容量，这样扩容的好处是不需要对<code>ConcurrentHashMap</code>中所有的元素做rehash，只需要对<code>Segment</code>中的元素做一次rehash就可以了。</p>\n<p>默认初始表的容量，必须是2的幂（至少为1），最大为16.</p>\n<h4 id=\"ConcurrentHashMap的get操作\"><a href=\"#ConcurrentHashMap的get操作\" class=\"headerlink\" title=\"ConcurrentHashMap的get操作\"></a>ConcurrentHashMap的get操作</h4><p>在java8中，<code>concurrentHashMap</code>的get操作是不需要加锁的。</p>\n<p><code>concurrentHashMap</code>的设计目标是支持高并发操作，所以在实现中，尽可能地减少锁的使用。在java8中，为了提高并发性能，<code>concurrentHashMap</code>使用node数组和链表&#x2F;红黑树 ，而且get操作完全无锁。</p>\n<p>get方法主要是通过<code>volatile</code>关键字和<code>Unsafe</code>类来保证的，在<code>ConcurrentHashMap</code>中，Node数组和Node节点的value字段都是用<code>volatile</code>关键字修饰的，这可以保证线程间的可见性， 也就是说当一个线程修改了数据，其他线程可以立即看到修改后的值，另外，Unsafe类提供了一种低级别的，直接操作内存的方式，可以用来实现无锁的并发操作。</p>\n<h5 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h5><p><code>volatile</code>是Java中的一个关键字，它用于修饰变量，当一个变量被<code>volatile</code>修饰后，它保证了以下两个主要特征：</p>\n<ul>\n<li>可见性：当一个线程修改了一个<code>volatile</code>变量的值，其他线程可以立即看到这个修改，这是因为volatile变量的读写都会直接操作主内存，而不是CPU缓存，从而保证了在多线程环境下的数据一致性</li>\n<li>有序性：<code>volatile</code>关键字禁止指令重排序优化。也就是说，对<code>volatile</code>变量的读写操作，都会按照代码执行顺序进行。</li>\n</ul>\n<h5 id=\"unsafe\"><a href=\"#unsafe\" class=\"headerlink\" title=\"unsafe\"></a>unsafe</h5><p>在Java中，<code>Unsafe</code>是一个类，全名为<code>sun.misc.Unsafe</code>。这个类提供了一些可以直接操作内存和线程的底层方法，因此使用它可以进行一些非常底层的操作，比如直接访问和修改对象的字段，甚至是没有被<code>public</code>修饰的字段。</p>\n<p>以下是一些<code>Unsafe</code>类提供的方法的例子：</p>\n<ul>\n<li><code>allocateMemory</code>、<code>freeMemory</code>和<code>reallocateMemory</code>：可以直接分配、释放和重新分配内存，就像C语言的<code>malloc</code>、<code>free</code>和<code>realloc</code>函数一样。</li>\n<li><code>putInt</code>、<code>getInt</code>等：可以直接读写内存。</li>\n<li><code>compareAndSwapInt</code>、<code>compareAndSwapLong</code>等：可以进行原子操作。</li>\n<li><code>park</code>和<code>unpark</code>：可以挂起和恢复线程。</li>\n</ul>\n<p>虽然<code>Unsafe</code>类提供了强大的功能，但是它的使用是有风险的，因为不正确的使用可能会导致程序崩溃，或者产生难以调试的问题。因此，<code>Unsafe</code>类并不是公开的API，它主要是为Java的核心类库提供服务的。在应用程序中，我们应该尽量避免使用<code>Unsafe</code>类，而是使用更高级的、更安全的API。</p>\n"},{"title":"日记","date":"2023-09-16T09:05:26.000Z","password":307729981,"abstract":"这里有一些加密的东西,密码需要继续阅读。","message":"加密文章，请向管理员索取密码","wrong_pass_message":"密码无效。请检查一下再试一次。","_content":"\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t《送东阳马生序》\n余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。既加冠，益慕圣贤之道 ，又患无硕师、名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。当余之从师也，负箧曳屣行深山巨谷中，穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四支僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴朱缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，烨然若神人；余则缊袍敝衣处其间，略无慕艳意。以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵诗书，无奔走之劳矣；有司业、博士为之师，未有问而不告，求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。其业有不精，德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达，与之论辨，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣！其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知予者哉？\n\n译文：\n\n我年幼时就爱学习。因为家中贫穷，⽆法得到书来看，常向藏书的⼈家求借，亲⼿抄录，约定⽇期送还。天⽓酷寒时，砚池中的⽔冻成了坚冰，⼿指不能屈伸，我仍不放松抄书。抄写完后，赶快送还⼈家，不敢稍稍超过约定的期限。因此⼈们⼤多肯将书借给我，我因⽽能够看各种各样的书。已经成年之后，更加仰慕圣贤的学说，⼜苦于不能与学识渊博的⽼师和名⼈交往，曾快步⾛到百⾥之外，⼿拿着经书向同乡前辈求教。前辈德⾼望重，门⼈学⽣挤满了他的房间，他的⾔辞和态度从未稍有委婉。我站着陪侍在他左右，提出疑难，询问道理，低⾝侧⽿向他请教；有时遭到他的训斥，表情更为恭敬，礼序更为周到，不敢答复⼀句话；等到他⾼兴时，就⼜向他请教。所以我虽然愚钝，最终还是得到不少教益。　　当我寻师时，背着书箱，把鞋后帮踩在脚后跟下，⾏⾛在深⼭⼤⾕之中，严冬寒风凛冽，⼤雪深达⼏尺，脚和⽪肤受冻裂开都不知道。到学舍后，四肢僵硬不能动弹，仆⼈给我灌下热⽔，⽤被⼦围盖⾝上，过了很久才暖和过来。住在旅馆，我每天吃两顿饭，没有新鲜肥嫩的美味享受。同学舍的求学者都穿着锦绣⾐服，戴着有红⾊帽带、饰有珍宝的帽⼦，腰间挂着⽩⽟环，左边佩戴着⼑，右边备有⾹囊，光彩鲜明，如同神⼈；我却穿着旧棉袍、破⾐服处于他们之间，毫⽆羡慕的意思。因为⼼中有⾜以使⾃⼰⾼兴的事，并不觉得吃穿的享受不如⼈家。我的勤劳和艰⾟⼤概就是这样。　　如今我虽已年⽼，没有什么成就，但所幸还得以置⾝于君⼦的⾏列中，承受着天⼦的恩宠荣耀，追随在公卿之后，每天陪侍着皇上，听候询问，天底下也不适当地称颂⾃⼰的姓名，更何况才能超过我的⼈呢？　　如今的学⽣们在太学中学习，朝廷每天供给膳⾷，⽗母每年都赠给冬天的⽪⾐和夏天的葛⾐，没有冻饿的忧虑了；坐在⾼⼤的屋⼦⾥⾯诵读经书，没有奔⾛的劳苦了；有司业和博⼠当他们的⽼师，没有询问⽽不告诉，求教⽽⽆所收获的了；凡是所应该具备的书籍，都集中在这⾥，不必再像我这样⽤⼿抄录，从别⼈处借来然后才能看到了。他们中如果学业有所不精通，品德有所未养成的，如果不是天赋、资质低下，就是⽤⼼不如我这样专⼀，难道可以说是别⼈的过错吗！　　东阳的年轻⼈马君则，在太学中已学习⼆年了，同辈⼈很称赞他的德⾏。我到京师朝见皇帝时，马⽣以同乡晚辈的⾝份拜见我，写了⼀封长信作为礼物，⽂辞很顺畅通达，同他论辩，⾔语温和⽽态度谦恭。他⾃⼰说少年时对于学习很⽤⼼、刻苦，这可以称作善于学习者吧！他将要回家拜见⽗母双亲，我特地将⾃⼰治学的艰难告诉他。如果说我勉励同乡努⼒学习，则是我的志意；如果诋毁我夸耀⾃⼰遭遇之好⽽在同乡前骄傲，难道是了解我吗？\n\n\n\n\n\n\n\n\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t《氓》\n\n氓之蚩蚩，抱布贸丝。匪来贸丝，来即我谋。送子涉淇，至于顿丘。匪我愆期，子无良媒。将子无怒，秋以为期。\n\n乘彼垝垣，以望复关。不见复关，泣涕涟涟。既见复关，载笑载言。尔卜尔筮，体无咎言。以尔车来，以我贿迁。\n\n桑之未落，其叶沃若。于嗟鸠兮，无食桑葚！于嗟女兮，无与士耽！士之耽兮，犹可说也。女之耽兮，不可说也！\n\n桑之落矣，其黄而陨。自我徂尔，三岁食贫。淇水汤汤，渐车帷裳。女也不爽，士贰其行。士也罔极，二三其德。\n\n三岁为妇，靡室劳矣。夙兴夜寐，靡有朝矣。言既遂矣，至于暴矣。兄弟不知，咥其笑矣。静言思之，躬自悼矣。\n\n及尔偕老，老使我怨。淇则有岸，隰则有泮。总角之宴，言笑晏晏，信誓旦旦，不思其反。反是不思，亦已焉哉！\n\n\n\n译文：\n\n憨厚农家小伙子，怀抱布匹来换丝。其实不是真换丝，找个机会谈婚事。送郎送过淇水西，到了顿丘情依依。不是我愿误佳期，你无媒人失礼仪。望郎休要发脾气，秋天到了来迎娶。爬上那垛破土墙，遥向复关凝神望。复关远在云雾中，不见情郎泪千行。情郎即从复关来，又说又笑喜洋洋。你去卜卦求神仙，没有凶兆心欢畅。赶着你的车子来，为我搬运好嫁妆。桑树叶子未落时，缀满枝头绿萋萋。嘘嘘那些斑鸠儿，别把桑葚吃嘴里。哎呀年轻姑娘们，别对男人情依依。男人若是恋上你，要丢便丢太容易。女人若是恋男子，要想解脱难挣离。桑树叶子落下了，枯黄憔悴任飘摇。自从嫁到你家来，多年穷苦受煎熬。淇水茫茫送我归，水溅车帷湿又潮。我做妻子没差错，是你男人太奸刁。反覆无常没准则，变心缺德耍花招。婚后多年守妇道，繁重家务不辞劳。起早睡晚不嫌苦，忙里忙外非一朝。谁知家业已成后，渐渐对我施凶暴。兄弟不知我处境，个个见我哈哈笑。静下心来细细想，独自伤神泪暗抛。当年发誓偕白头，如今未老心先忧。淇水滔滔终有岸，沼泽虽宽有尽头。回想少时多欢乐，谈笑之间露温柔。海誓山盟犹在耳，不曾想过会违背誓言。莫再回想背盟事，既已终结便罢休！\n\n","source":"_posts/encryptionTest.md","raw":"---\ntitle: 日记\ndate: 2023-09-16 17:05:26\ntags: \n - 文章\ncategories: \n - 加密\npassword: 307729981\nabstract: 这里有一些加密的东西,密码需要继续阅读。\nmessage: 加密文章，请向管理员索取密码\nwrong_pass_message: 密码无效。请检查一下再试一次。\n---\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t《送东阳马生序》\n余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。既加冠，益慕圣贤之道 ，又患无硕师、名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。当余之从师也，负箧曳屣行深山巨谷中，穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四支僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴朱缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，烨然若神人；余则缊袍敝衣处其间，略无慕艳意。以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵诗书，无奔走之劳矣；有司业、博士为之师，未有问而不告，求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。其业有不精，德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达，与之论辨，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣！其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知予者哉？\n\n译文：\n\n我年幼时就爱学习。因为家中贫穷，⽆法得到书来看，常向藏书的⼈家求借，亲⼿抄录，约定⽇期送还。天⽓酷寒时，砚池中的⽔冻成了坚冰，⼿指不能屈伸，我仍不放松抄书。抄写完后，赶快送还⼈家，不敢稍稍超过约定的期限。因此⼈们⼤多肯将书借给我，我因⽽能够看各种各样的书。已经成年之后，更加仰慕圣贤的学说，⼜苦于不能与学识渊博的⽼师和名⼈交往，曾快步⾛到百⾥之外，⼿拿着经书向同乡前辈求教。前辈德⾼望重，门⼈学⽣挤满了他的房间，他的⾔辞和态度从未稍有委婉。我站着陪侍在他左右，提出疑难，询问道理，低⾝侧⽿向他请教；有时遭到他的训斥，表情更为恭敬，礼序更为周到，不敢答复⼀句话；等到他⾼兴时，就⼜向他请教。所以我虽然愚钝，最终还是得到不少教益。　　当我寻师时，背着书箱，把鞋后帮踩在脚后跟下，⾏⾛在深⼭⼤⾕之中，严冬寒风凛冽，⼤雪深达⼏尺，脚和⽪肤受冻裂开都不知道。到学舍后，四肢僵硬不能动弹，仆⼈给我灌下热⽔，⽤被⼦围盖⾝上，过了很久才暖和过来。住在旅馆，我每天吃两顿饭，没有新鲜肥嫩的美味享受。同学舍的求学者都穿着锦绣⾐服，戴着有红⾊帽带、饰有珍宝的帽⼦，腰间挂着⽩⽟环，左边佩戴着⼑，右边备有⾹囊，光彩鲜明，如同神⼈；我却穿着旧棉袍、破⾐服处于他们之间，毫⽆羡慕的意思。因为⼼中有⾜以使⾃⼰⾼兴的事，并不觉得吃穿的享受不如⼈家。我的勤劳和艰⾟⼤概就是这样。　　如今我虽已年⽼，没有什么成就，但所幸还得以置⾝于君⼦的⾏列中，承受着天⼦的恩宠荣耀，追随在公卿之后，每天陪侍着皇上，听候询问，天底下也不适当地称颂⾃⼰的姓名，更何况才能超过我的⼈呢？　　如今的学⽣们在太学中学习，朝廷每天供给膳⾷，⽗母每年都赠给冬天的⽪⾐和夏天的葛⾐，没有冻饿的忧虑了；坐在⾼⼤的屋⼦⾥⾯诵读经书，没有奔⾛的劳苦了；有司业和博⼠当他们的⽼师，没有询问⽽不告诉，求教⽽⽆所收获的了；凡是所应该具备的书籍，都集中在这⾥，不必再像我这样⽤⼿抄录，从别⼈处借来然后才能看到了。他们中如果学业有所不精通，品德有所未养成的，如果不是天赋、资质低下，就是⽤⼼不如我这样专⼀，难道可以说是别⼈的过错吗！　　东阳的年轻⼈马君则，在太学中已学习⼆年了，同辈⼈很称赞他的德⾏。我到京师朝见皇帝时，马⽣以同乡晚辈的⾝份拜见我，写了⼀封长信作为礼物，⽂辞很顺畅通达，同他论辩，⾔语温和⽽态度谦恭。他⾃⼰说少年时对于学习很⽤⼼、刻苦，这可以称作善于学习者吧！他将要回家拜见⽗母双亲，我特地将⾃⼰治学的艰难告诉他。如果说我勉励同乡努⼒学习，则是我的志意；如果诋毁我夸耀⾃⼰遭遇之好⽽在同乡前骄傲，难道是了解我吗？\n\n\n\n\n\n\n\n\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t《氓》\n\n氓之蚩蚩，抱布贸丝。匪来贸丝，来即我谋。送子涉淇，至于顿丘。匪我愆期，子无良媒。将子无怒，秋以为期。\n\n乘彼垝垣，以望复关。不见复关，泣涕涟涟。既见复关，载笑载言。尔卜尔筮，体无咎言。以尔车来，以我贿迁。\n\n桑之未落，其叶沃若。于嗟鸠兮，无食桑葚！于嗟女兮，无与士耽！士之耽兮，犹可说也。女之耽兮，不可说也！\n\n桑之落矣，其黄而陨。自我徂尔，三岁食贫。淇水汤汤，渐车帷裳。女也不爽，士贰其行。士也罔极，二三其德。\n\n三岁为妇，靡室劳矣。夙兴夜寐，靡有朝矣。言既遂矣，至于暴矣。兄弟不知，咥其笑矣。静言思之，躬自悼矣。\n\n及尔偕老，老使我怨。淇则有岸，隰则有泮。总角之宴，言笑晏晏，信誓旦旦，不思其反。反是不思，亦已焉哉！\n\n\n\n译文：\n\n憨厚农家小伙子，怀抱布匹来换丝。其实不是真换丝，找个机会谈婚事。送郎送过淇水西，到了顿丘情依依。不是我愿误佳期，你无媒人失礼仪。望郎休要发脾气，秋天到了来迎娶。爬上那垛破土墙，遥向复关凝神望。复关远在云雾中，不见情郎泪千行。情郎即从复关来，又说又笑喜洋洋。你去卜卦求神仙，没有凶兆心欢畅。赶着你的车子来，为我搬运好嫁妆。桑树叶子未落时，缀满枝头绿萋萋。嘘嘘那些斑鸠儿，别把桑葚吃嘴里。哎呀年轻姑娘们，别对男人情依依。男人若是恋上你，要丢便丢太容易。女人若是恋男子，要想解脱难挣离。桑树叶子落下了，枯黄憔悴任飘摇。自从嫁到你家来，多年穷苦受煎熬。淇水茫茫送我归，水溅车帷湿又潮。我做妻子没差错，是你男人太奸刁。反覆无常没准则，变心缺德耍花招。婚后多年守妇道，繁重家务不辞劳。起早睡晚不嫌苦，忙里忙外非一朝。谁知家业已成后，渐渐对我施凶暴。兄弟不知我处境，个个见我哈哈笑。静下心来细细想，独自伤神泪暗抛。当年发誓偕白头，如今未老心先忧。淇水滔滔终有岸，沼泽虽宽有尽头。回想少时多欢乐，谈笑之间露温柔。海誓山盟犹在耳，不曾想过会违背誓言。莫再回想背盟事，既已终结便罢休！\n\n","slug":"encryptionTest","published":1,"updated":"2024-02-22T09:54:17.514Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsx20wz40003j8cl16xb8uf7","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"密码无效。请检查一下再试一次。\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"ca2286750057fbc182097f79a9585bd5703465a18c2297941b398b0c9eb65a52\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">加密文章，请向管理员索取密码</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"length":2556,"excerpt":"这里有一些加密的东西,密码需要继续阅读。","more":"这里有一些加密的东西,密码需要继续阅读。","origin":"<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t《送东阳马生序》<br>余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。既加冠，益慕圣贤之道 ，又患无硕师、名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。当余之从师也，负箧曳屣行深山巨谷中，穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四支僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴朱缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，烨然若神人；余则缊袍敝衣处其间，略无慕艳意。以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵诗书，无奔走之劳矣；有司业、博士为之师，未有问而不告，求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。其业有不精，德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达，与之论辨，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣！其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知予者哉？</p>\n<p>译文：</p>\n<p>我年幼时就爱学习。因为家中贫穷，⽆法得到书来看，常向藏书的⼈家求借，亲⼿抄录，约定⽇期送还。天⽓酷寒时，砚池中的⽔冻成了坚冰，⼿指不能屈伸，我仍不放松抄书。抄写完后，赶快送还⼈家，不敢稍稍超过约定的期限。因此⼈们⼤多肯将书借给我，我因⽽能够看各种各样的书。已经成年之后，更加仰慕圣贤的学说，⼜苦于不能与学识渊博的⽼师和名⼈交往，曾快步⾛到百⾥之外，⼿拿着经书向同乡前辈求教。前辈德⾼望重，门⼈学⽣挤满了他的房间，他的⾔辞和态度从未稍有委婉。我站着陪侍在他左右，提出疑难，询问道理，低⾝侧⽿向他请教；有时遭到他的训斥，表情更为恭敬，礼序更为周到，不敢答复⼀句话；等到他⾼兴时，就⼜向他请教。所以我虽然愚钝，最终还是得到不少教益。　　当我寻师时，背着书箱，把鞋后帮踩在脚后跟下，⾏⾛在深⼭⼤⾕之中，严冬寒风凛冽，⼤雪深达⼏尺，脚和⽪肤受冻裂开都不知道。到学舍后，四肢僵硬不能动弹，仆⼈给我灌下热⽔，⽤被⼦围盖⾝上，过了很久才暖和过来。住在旅馆，我每天吃两顿饭，没有新鲜肥嫩的美味享受。同学舍的求学者都穿着锦绣⾐服，戴着有红⾊帽带、饰有珍宝的帽⼦，腰间挂着⽩⽟环，左边佩戴着⼑，右边备有⾹囊，光彩鲜明，如同神⼈；我却穿着旧棉袍、破⾐服处于他们之间，毫⽆羡慕的意思。因为⼼中有⾜以使⾃⼰⾼兴的事，并不觉得吃穿的享受不如⼈家。我的勤劳和艰⾟⼤概就是这样。　　如今我虽已年⽼，没有什么成就，但所幸还得以置⾝于君⼦的⾏列中，承受着天⼦的恩宠荣耀，追随在公卿之后，每天陪侍着皇上，听候询问，天底下也不适当地称颂⾃⼰的姓名，更何况才能超过我的⼈呢？　　如今的学⽣们在太学中学习，朝廷每天供给膳⾷，⽗母每年都赠给冬天的⽪⾐和夏天的葛⾐，没有冻饿的忧虑了；坐在⾼⼤的屋⼦⾥⾯诵读经书，没有奔⾛的劳苦了；有司业和博⼠当他们的⽼师，没有询问⽽不告诉，求教⽽⽆所收获的了；凡是所应该具备的书籍，都集中在这⾥，不必再像我这样⽤⼿抄录，从别⼈处借来然后才能看到了。他们中如果学业有所不精通，品德有所未养成的，如果不是天赋、资质低下，就是⽤⼼不如我这样专⼀，难道可以说是别⼈的过错吗！　　东阳的年轻⼈马君则，在太学中已学习⼆年了，同辈⼈很称赞他的德⾏。我到京师朝见皇帝时，马⽣以同乡晚辈的⾝份拜见我，写了⼀封长信作为礼物，⽂辞很顺畅通达，同他论辩，⾔语温和⽽态度谦恭。他⾃⼰说少年时对于学习很⽤⼼、刻苦，这可以称作善于学习者吧！他将要回家拜见⽗母双亲，我特地将⾃⼰治学的艰难告诉他。如果说我勉励同乡努⼒学习，则是我的志意；如果诋毁我夸耀⾃⼰遭遇之好⽽在同乡前骄傲，难道是了解我吗？</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t《氓》</p>\n<p>氓之蚩蚩，抱布贸丝。匪来贸丝，来即我谋。送子涉淇，至于顿丘。匪我愆期，子无良媒。将子无怒，秋以为期。</p>\n<p>乘彼垝垣，以望复关。不见复关，泣涕涟涟。既见复关，载笑载言。尔卜尔筮，体无咎言。以尔车来，以我贿迁。</p>\n<p>桑之未落，其叶沃若。于嗟鸠兮，无食桑葚！于嗟女兮，无与士耽！士之耽兮，犹可说也。女之耽兮，不可说也！</p>\n<p>桑之落矣，其黄而陨。自我徂尔，三岁食贫。淇水汤汤，渐车帷裳。女也不爽，士贰其行。士也罔极，二三其德。</p>\n<p>三岁为妇，靡室劳矣。夙兴夜寐，靡有朝矣。言既遂矣，至于暴矣。兄弟不知，咥其笑矣。静言思之，躬自悼矣。</p>\n<p>及尔偕老，老使我怨。淇则有岸，隰则有泮。总角之宴，言笑晏晏，信誓旦旦，不思其反。反是不思，亦已焉哉！</p>\n<p>译文：</p>\n<p>憨厚农家小伙子，怀抱布匹来换丝。其实不是真换丝，找个机会谈婚事。送郎送过淇水西，到了顿丘情依依。不是我愿误佳期，你无媒人失礼仪。望郎休要发脾气，秋天到了来迎娶。爬上那垛破土墙，遥向复关凝神望。复关远在云雾中，不见情郎泪千行。情郎即从复关来，又说又笑喜洋洋。你去卜卦求神仙，没有凶兆心欢畅。赶着你的车子来，为我搬运好嫁妆。桑树叶子未落时，缀满枝头绿萋萋。嘘嘘那些斑鸠儿，别把桑葚吃嘴里。哎呀年轻姑娘们，别对男人情依依。男人若是恋上你，要丢便丢太容易。女人若是恋男子，要想解脱难挣离。桑树叶子落下了，枯黄憔悴任飘摇。自从嫁到你家来，多年穷苦受煎熬。淇水茫茫送我归，水溅车帷湿又潮。我做妻子没差错，是你男人太奸刁。反覆无常没准则，变心缺德耍花招。婚后多年守妇道，繁重家务不辞劳。起早睡晚不嫌苦，忙里忙外非一朝。谁知家业已成后，渐渐对我施凶暴。兄弟不知我处境，个个见我哈哈笑。静下心来细细想，独自伤神泪暗抛。当年发誓偕白头，如今未老心先忧。淇水滔滔终有岸，沼泽虽宽有尽头。回想少时多欢乐，谈笑之间露温柔。海誓山盟犹在耳，不曾想过会违背誓言。莫再回想背盟事，既已终结便罢休！</p>\n","encrypt":true},{"title":"threeHandshake","date":"2024-02-20T09:16:30.000Z","_content":"\n#### TCP三次握手，四次挥手\n\n三次握手过程：\n\n客户端 —— 发送带有SYN标志的数据包——服务端   一次握手 Client进入syn_sent\n\n状态\n\n服务端——发送带有SYN/ACK标志的数据包——客户端  二次握手服务端进入syn_rcvd\n\n客户端——发送带有ACK标志的数据包——服务端  三次握手 链接就进入Established状态\n\n\n\n**为什么三次**\n\n主要是为了建立可靠的通信信道，保证客户端与服务端同时具备发送，接收数据的能力\n\n**为什么两次不行？**\n\n- 防止已失效的请求报文又传送到了服务端，建立了多余的连接，浪费资源\n- 两次握手只能保证单向连接是通畅的，","source":"_posts/threeHandshake.md","raw":"---\ntitle: threeHandshake\ndate: 2024-02-20 17:16:30\ntags: \n - TCP连接\ncategories: \n - 网络\n---\n\n#### TCP三次握手，四次挥手\n\n三次握手过程：\n\n客户端 —— 发送带有SYN标志的数据包——服务端   一次握手 Client进入syn_sent\n\n状态\n\n服务端——发送带有SYN/ACK标志的数据包——客户端  二次握手服务端进入syn_rcvd\n\n客户端——发送带有ACK标志的数据包——服务端  三次握手 链接就进入Established状态\n\n\n\n**为什么三次**\n\n主要是为了建立可靠的通信信道，保证客户端与服务端同时具备发送，接收数据的能力\n\n**为什么两次不行？**\n\n- 防止已失效的请求报文又传送到了服务端，建立了多余的连接，浪费资源\n- 两次握手只能保证单向连接是通畅的，","slug":"threeHandshake","published":1,"updated":"2024-02-23T02:13:04.877Z","_id":"clsx20wza0007j8clgsn299za","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"TCP三次握手，四次挥手\"><a href=\"#TCP三次握手，四次挥手\" class=\"headerlink\" title=\"TCP三次握手，四次挥手\"></a>TCP三次握手，四次挥手</h4><p>三次握手过程：</p>\n<p>客户端 —— 发送带有SYN标志的数据包——服务端   一次握手 Client进入syn_sent</p>\n<p>状态</p>\n<p>服务端——发送带有SYN&#x2F;ACK标志的数据包——客户端  二次握手服务端进入syn_rcvd</p>\n<p>客户端——发送带有ACK标志的数据包——服务端  三次握手 链接就进入Established状态</p>\n<p><strong>为什么三次</strong></p>\n<p>主要是为了建立可靠的通信信道，保证客户端与服务端同时具备发送，接收数据的能力</p>\n<p><strong>为什么两次不行？</strong></p>\n<ul>\n<li>防止已失效的请求报文又传送到了服务端，建立了多余的连接，浪费资源</li>\n<li>两次握手只能保证单向连接是通畅的，</li>\n</ul>\n","site":{"data":{}},"length":258,"excerpt":"","more":"<h4 id=\"TCP三次握手，四次挥手\"><a href=\"#TCP三次握手，四次挥手\" class=\"headerlink\" title=\"TCP三次握手，四次挥手\"></a>TCP三次握手，四次挥手</h4><p>三次握手过程：</p>\n<p>客户端 —— 发送带有SYN标志的数据包——服务端   一次握手 Client进入syn_sent</p>\n<p>状态</p>\n<p>服务端——发送带有SYN&#x2F;ACK标志的数据包——客户端  二次握手服务端进入syn_rcvd</p>\n<p>客户端——发送带有ACK标志的数据包——服务端  三次握手 链接就进入Established状态</p>\n<p><strong>为什么三次</strong></p>\n<p>主要是为了建立可靠的通信信道，保证客户端与服务端同时具备发送，接收数据的能力</p>\n<p><strong>为什么两次不行？</strong></p>\n<ul>\n<li>防止已失效的请求报文又传送到了服务端，建立了多余的连接，浪费资源</li>\n<li>两次握手只能保证单向连接是通畅的，</li>\n</ul>\n"},{"title":"redisPersistence","date":"2024-02-21T07:21:32.000Z","_content":"\n\n\n#### redis持久化\n\nredis持久化分为RDB和AOF:\n\n​\tRDB：RDB持久化就是在指定时间间隔内将内存中的数据集快照写入磁盘，也就是`snapshot`，它恢复时是直接将快照文件直接读到内存里。\n\nRDB触发的方式有几种：两种，分别是手动触发和自动触发\n\n| 触发方式 | 实现方式                 | 特性                                                         |\n| -------- | ------------------------ | ------------------------------------------------------------ |\n| 手动触发 | save命令                 | 这个指令会直接阻塞当前redis服务器，直到RDB完成了为止         |\n|          | bgsave命令               | 主进程fork一个子进程，由子进程完成持久化操作，<br />而主进程继续处理客户端的读写请求，<br />如果需要手动实现持久化，推荐使用这这种方式 |\n| 自动触发 | 配置redis.conf的save参数 | save 20 3 代表的是在20s内写入3次就进行持久化                 |\n\n**bgsave的工作流程：**\n\n- 主进程fork出一个子进程，这时候主进程会被阻塞\n- 子进程创建完成后，`redis`客户端会输出 `Background saving started`,这就意味着子进程开始进行持久化操作了\t\n- 子进程持久化完成后会生成一个rdb文件，将本次的rdb文件通过原子替换的方式将上一次备份的rdb文件覆盖\n- 子进程发送信号通知父进程本次任务完成\n\n**RDB常见的配置参数**\n\n| 参数           | 作用                                                         |\n| -------------- | ------------------------------------------------------------ |\n| dbfilename     | 指定rdb的文件名                                              |\n| dir            | 指定rdb文件的持久化位置，默认取redis服务端的位置             |\n| rdbcompression | 开启后redis默认使用LZF算法压缩rdb文件，这种方式会消耗CPU，但是压缩后的大小远远小于内存 |\n|                |                                                              |\n\n**RDB的优点和缺点：**\n\n|      |                                                              |\n| ---- | ------------------------------------------------------------ |\n| 优点 | RDB是一个紧凑的单一文件，很方便传送到另一个远端数据中心，非常适合用于灾难回复<br />在恢复较大的数据集时，RDb方式会更快一些 |\n| 缺点 | RDB没办法做到实时持久化，bgsave每次fork子进程都会阻塞，频繁执行成本较高<br />在一定间隔时间做备份，如果redis意外down掉，就会丢失最后一次快照之后的所有修改 |\n\n**AOF：**默认情况下，redis没有开启AOF，开启配置需要在配置文件中将`appendonly` 改为 yes，AOF会以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来，只需追加文件不许修改文件，`redis`启动时会读取该文件重新构建数据。\n\n**AOF的触发类型：**\n\n| 参数                  | 参数说明                                                     |\n| :-------------------- | ------------------------------------------------------------ |\n| appendfsync always    | 同步持久化，每次放生数据变化就会立马写入磁盘，新能比较差但数据完整性比较好 |\n| appendfsync  everysec | 默认推荐，每次异步记录一次                                   |\n| appendfsync no        | 不同步                                                       |\n\n**配置重写触发机制：**\n\n```\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n```\n\n**参数说明：**当AOF文件大小是上一次大小的一倍并且大于64mb时触发\n\n**根据AOF恢复数据：**\n\n正常情况下，将`appendonly.aof`文件复制到bin目录下，并且重启`redis`服务即可，在实际开发中，文件会存储在网络设备上，保障数据高可靠，如果因为某些原因导致`appendonly.aof`文件格式异常，从而导致数据还原失败，可以通过命令`redis-check-aof --fix appendonly.aof`进行修复\n\n**AOF的重写压缩机制：**\n\nAOF的工作原理将每次写操作追加到文件中，这样文件会出现很多冗余内容，所以redis新增了重写机制\n\nAOF可以生成一个新的AOF文件，新文件和老文件保存的信息一样，但体积更小，还可以做命令的合并，进而节省了redis的储存空间\n\n**AOF重写流程：**\n\n- 把主线程的内存拷贝一份给fork出来的`bgrewiteaof`子进程，这里面包含lredis最新的数据\n- 子进程将其中的数据进行重写。\n- 主线程在重写时候维护一个AOF重写缓冲区，将重写过程中的写操作记录，计入其中，保证重写后的AOF日志也能记录在重写过程中产生的新数据 \n- 用新AOF替换老AOF\n\n**AOF的优点和缺点：**\n\n|      |                                                             |\n| ---- | ----------------------------------------------------------- |\n| 优点 | 数据的完整性和一致性更高                                    |\n| 缺点 | 因为AOF记录的内容多，文件只会越来越大，数据恢复也会越来越慢 |\n\n","source":"_posts/redisPersistence.md","raw":"---\ntitle: redisPersistence\ndate: 2024-02-21 15:21:32\ntags:\n - redis持久化\ncategories:\n - redis\n---\n\n\n\n#### redis持久化\n\nredis持久化分为RDB和AOF:\n\n​\tRDB：RDB持久化就是在指定时间间隔内将内存中的数据集快照写入磁盘，也就是`snapshot`，它恢复时是直接将快照文件直接读到内存里。\n\nRDB触发的方式有几种：两种，分别是手动触发和自动触发\n\n| 触发方式 | 实现方式                 | 特性                                                         |\n| -------- | ------------------------ | ------------------------------------------------------------ |\n| 手动触发 | save命令                 | 这个指令会直接阻塞当前redis服务器，直到RDB完成了为止         |\n|          | bgsave命令               | 主进程fork一个子进程，由子进程完成持久化操作，<br />而主进程继续处理客户端的读写请求，<br />如果需要手动实现持久化，推荐使用这这种方式 |\n| 自动触发 | 配置redis.conf的save参数 | save 20 3 代表的是在20s内写入3次就进行持久化                 |\n\n**bgsave的工作流程：**\n\n- 主进程fork出一个子进程，这时候主进程会被阻塞\n- 子进程创建完成后，`redis`客户端会输出 `Background saving started`,这就意味着子进程开始进行持久化操作了\t\n- 子进程持久化完成后会生成一个rdb文件，将本次的rdb文件通过原子替换的方式将上一次备份的rdb文件覆盖\n- 子进程发送信号通知父进程本次任务完成\n\n**RDB常见的配置参数**\n\n| 参数           | 作用                                                         |\n| -------------- | ------------------------------------------------------------ |\n| dbfilename     | 指定rdb的文件名                                              |\n| dir            | 指定rdb文件的持久化位置，默认取redis服务端的位置             |\n| rdbcompression | 开启后redis默认使用LZF算法压缩rdb文件，这种方式会消耗CPU，但是压缩后的大小远远小于内存 |\n|                |                                                              |\n\n**RDB的优点和缺点：**\n\n|      |                                                              |\n| ---- | ------------------------------------------------------------ |\n| 优点 | RDB是一个紧凑的单一文件，很方便传送到另一个远端数据中心，非常适合用于灾难回复<br />在恢复较大的数据集时，RDb方式会更快一些 |\n| 缺点 | RDB没办法做到实时持久化，bgsave每次fork子进程都会阻塞，频繁执行成本较高<br />在一定间隔时间做备份，如果redis意外down掉，就会丢失最后一次快照之后的所有修改 |\n\n**AOF：**默认情况下，redis没有开启AOF，开启配置需要在配置文件中将`appendonly` 改为 yes，AOF会以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来，只需追加文件不许修改文件，`redis`启动时会读取该文件重新构建数据。\n\n**AOF的触发类型：**\n\n| 参数                  | 参数说明                                                     |\n| :-------------------- | ------------------------------------------------------------ |\n| appendfsync always    | 同步持久化，每次放生数据变化就会立马写入磁盘，新能比较差但数据完整性比较好 |\n| appendfsync  everysec | 默认推荐，每次异步记录一次                                   |\n| appendfsync no        | 不同步                                                       |\n\n**配置重写触发机制：**\n\n```\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n```\n\n**参数说明：**当AOF文件大小是上一次大小的一倍并且大于64mb时触发\n\n**根据AOF恢复数据：**\n\n正常情况下，将`appendonly.aof`文件复制到bin目录下，并且重启`redis`服务即可，在实际开发中，文件会存储在网络设备上，保障数据高可靠，如果因为某些原因导致`appendonly.aof`文件格式异常，从而导致数据还原失败，可以通过命令`redis-check-aof --fix appendonly.aof`进行修复\n\n**AOF的重写压缩机制：**\n\nAOF的工作原理将每次写操作追加到文件中，这样文件会出现很多冗余内容，所以redis新增了重写机制\n\nAOF可以生成一个新的AOF文件，新文件和老文件保存的信息一样，但体积更小，还可以做命令的合并，进而节省了redis的储存空间\n\n**AOF重写流程：**\n\n- 把主线程的内存拷贝一份给fork出来的`bgrewiteaof`子进程，这里面包含lredis最新的数据\n- 子进程将其中的数据进行重写。\n- 主线程在重写时候维护一个AOF重写缓冲区，将重写过程中的写操作记录，计入其中，保证重写后的AOF日志也能记录在重写过程中产生的新数据 \n- 用新AOF替换老AOF\n\n**AOF的优点和缺点：**\n\n|      |                                                             |\n| ---- | ----------------------------------------------------------- |\n| 优点 | 数据的完整性和一致性更高                                    |\n| 缺点 | 因为AOF记录的内容多，文件只会越来越大，数据恢复也会越来越慢 |\n\n","slug":"redisPersistence","published":1,"updated":"2024-02-23T02:12:34.551Z","_id":"clsx20wzc0009j8cl3zo0b9a7","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"redis持久化\"><a href=\"#redis持久化\" class=\"headerlink\" title=\"redis持久化\"></a>redis持久化</h4><p>redis持久化分为RDB和AOF:</p>\n<p>​\tRDB：RDB持久化就是在指定时间间隔内将内存中的数据集快照写入磁盘，也就是<code>snapshot</code>，它恢复时是直接将快照文件直接读到内存里。</p>\n<p>RDB触发的方式有几种：两种，分别是手动触发和自动触发</p>\n<table>\n<thead>\n<tr>\n<th>触发方式</th>\n<th>实现方式</th>\n<th>特性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>手动触发</td>\n<td>save命令</td>\n<td>这个指令会直接阻塞当前redis服务器，直到RDB完成了为止</td>\n</tr>\n<tr>\n<td></td>\n<td>bgsave命令</td>\n<td>主进程fork一个子进程，由子进程完成持久化操作，<br />而主进程继续处理客户端的读写请求，<br />如果需要手动实现持久化，推荐使用这这种方式</td>\n</tr>\n<tr>\n<td>自动触发</td>\n<td>配置redis.conf的save参数</td>\n<td>save 20 3 代表的是在20s内写入3次就进行持久化</td>\n</tr>\n</tbody></table>\n<p><strong>bgsave的工作流程：</strong></p>\n<ul>\n<li>主进程fork出一个子进程，这时候主进程会被阻塞</li>\n<li>子进程创建完成后，<code>redis</code>客户端会输出 <code>Background saving started</code>,这就意味着子进程开始进行持久化操作了\t</li>\n<li>子进程持久化完成后会生成一个rdb文件，将本次的rdb文件通过原子替换的方式将上一次备份的rdb文件覆盖</li>\n<li>子进程发送信号通知父进程本次任务完成</li>\n</ul>\n<p><strong>RDB常见的配置参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dbfilename</td>\n<td>指定rdb的文件名</td>\n</tr>\n<tr>\n<td>dir</td>\n<td>指定rdb文件的持久化位置，默认取redis服务端的位置</td>\n</tr>\n<tr>\n<td>rdbcompression</td>\n<td>开启后redis默认使用LZF算法压缩rdb文件，这种方式会消耗CPU，但是压缩后的大小远远小于内存</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>RDB的优点和缺点：</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>优点</td>\n<td>RDB是一个紧凑的单一文件，很方便传送到另一个远端数据中心，非常适合用于灾难回复<br />在恢复较大的数据集时，RDb方式会更快一些</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>RDB没办法做到实时持久化，bgsave每次fork子进程都会阻塞，频繁执行成本较高<br />在一定间隔时间做备份，如果redis意外down掉，就会丢失最后一次快照之后的所有修改</td>\n</tr>\n</tbody></table>\n<p><strong>AOF：</strong>默认情况下，redis没有开启AOF，开启配置需要在配置文件中将<code>appendonly</code> 改为 yes，AOF会以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来，只需追加文件不许修改文件，<code>redis</code>启动时会读取该文件重新构建数据。</p>\n<p><strong>AOF的触发类型：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">appendfsync always</td>\n<td>同步持久化，每次放生数据变化就会立马写入磁盘，新能比较差但数据完整性比较好</td>\n</tr>\n<tr>\n<td align=\"left\">appendfsync  everysec</td>\n<td>默认推荐，每次异步记录一次</td>\n</tr>\n<tr>\n<td align=\"left\">appendfsync no</td>\n<td>不同步</td>\n</tr>\n</tbody></table>\n<p><strong>配置重写触发机制：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto-aof-rewrite-percentage 100</span><br><span class=\"line\">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数说明：</strong>当AOF文件大小是上一次大小的一倍并且大于64mb时触发</p>\n<p><strong>根据AOF恢复数据：</strong></p>\n<p>正常情况下，将<code>appendonly.aof</code>文件复制到bin目录下，并且重启<code>redis</code>服务即可，在实际开发中，文件会存储在网络设备上，保障数据高可靠，如果因为某些原因导致<code>appendonly.aof</code>文件格式异常，从而导致数据还原失败，可以通过命令<code>redis-check-aof --fix appendonly.aof</code>进行修复</p>\n<p><strong>AOF的重写压缩机制：</strong></p>\n<p>AOF的工作原理将每次写操作追加到文件中，这样文件会出现很多冗余内容，所以redis新增了重写机制</p>\n<p>AOF可以生成一个新的AOF文件，新文件和老文件保存的信息一样，但体积更小，还可以做命令的合并，进而节省了redis的储存空间</p>\n<p><strong>AOF重写流程：</strong></p>\n<ul>\n<li>把主线程的内存拷贝一份给fork出来的<code>bgrewiteaof</code>子进程，这里面包含lredis最新的数据</li>\n<li>子进程将其中的数据进行重写。</li>\n<li>主线程在重写时候维护一个AOF重写缓冲区，将重写过程中的写操作记录，计入其中，保证重写后的AOF日志也能记录在重写过程中产生的新数据 </li>\n<li>用新AOF替换老AOF</li>\n</ul>\n<p><strong>AOF的优点和缺点：</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>优点</td>\n<td>数据的完整性和一致性更高</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>因为AOF记录的内容多，文件只会越来越大，数据恢复也会越来越慢</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"length":1590,"excerpt":"","more":"<h4 id=\"redis持久化\"><a href=\"#redis持久化\" class=\"headerlink\" title=\"redis持久化\"></a>redis持久化</h4><p>redis持久化分为RDB和AOF:</p>\n<p>​\tRDB：RDB持久化就是在指定时间间隔内将内存中的数据集快照写入磁盘，也就是<code>snapshot</code>，它恢复时是直接将快照文件直接读到内存里。</p>\n<p>RDB触发的方式有几种：两种，分别是手动触发和自动触发</p>\n<table>\n<thead>\n<tr>\n<th>触发方式</th>\n<th>实现方式</th>\n<th>特性</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>手动触发</td>\n<td>save命令</td>\n<td>这个指令会直接阻塞当前redis服务器，直到RDB完成了为止</td>\n</tr>\n<tr>\n<td></td>\n<td>bgsave命令</td>\n<td>主进程fork一个子进程，由子进程完成持久化操作，<br />而主进程继续处理客户端的读写请求，<br />如果需要手动实现持久化，推荐使用这这种方式</td>\n</tr>\n<tr>\n<td>自动触发</td>\n<td>配置redis.conf的save参数</td>\n<td>save 20 3 代表的是在20s内写入3次就进行持久化</td>\n</tr>\n</tbody></table>\n<p><strong>bgsave的工作流程：</strong></p>\n<ul>\n<li>主进程fork出一个子进程，这时候主进程会被阻塞</li>\n<li>子进程创建完成后，<code>redis</code>客户端会输出 <code>Background saving started</code>,这就意味着子进程开始进行持久化操作了\t</li>\n<li>子进程持久化完成后会生成一个rdb文件，将本次的rdb文件通过原子替换的方式将上一次备份的rdb文件覆盖</li>\n<li>子进程发送信号通知父进程本次任务完成</li>\n</ul>\n<p><strong>RDB常见的配置参数</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dbfilename</td>\n<td>指定rdb的文件名</td>\n</tr>\n<tr>\n<td>dir</td>\n<td>指定rdb文件的持久化位置，默认取redis服务端的位置</td>\n</tr>\n<tr>\n<td>rdbcompression</td>\n<td>开启后redis默认使用LZF算法压缩rdb文件，这种方式会消耗CPU，但是压缩后的大小远远小于内存</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p><strong>RDB的优点和缺点：</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>优点</td>\n<td>RDB是一个紧凑的单一文件，很方便传送到另一个远端数据中心，非常适合用于灾难回复<br />在恢复较大的数据集时，RDb方式会更快一些</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>RDB没办法做到实时持久化，bgsave每次fork子进程都会阻塞，频繁执行成本较高<br />在一定间隔时间做备份，如果redis意外down掉，就会丢失最后一次快照之后的所有修改</td>\n</tr>\n</tbody></table>\n<p><strong>AOF：</strong>默认情况下，redis没有开启AOF，开启配置需要在配置文件中将<code>appendonly</code> 改为 yes，AOF会以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来，只需追加文件不许修改文件，<code>redis</code>启动时会读取该文件重新构建数据。</p>\n<p><strong>AOF的触发类型：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th>参数说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">appendfsync always</td>\n<td>同步持久化，每次放生数据变化就会立马写入磁盘，新能比较差但数据完整性比较好</td>\n</tr>\n<tr>\n<td align=\"left\">appendfsync  everysec</td>\n<td>默认推荐，每次异步记录一次</td>\n</tr>\n<tr>\n<td align=\"left\">appendfsync no</td>\n<td>不同步</td>\n</tr>\n</tbody></table>\n<p><strong>配置重写触发机制：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto-aof-rewrite-percentage 100</span><br><span class=\"line\">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数说明：</strong>当AOF文件大小是上一次大小的一倍并且大于64mb时触发</p>\n<p><strong>根据AOF恢复数据：</strong></p>\n<p>正常情况下，将<code>appendonly.aof</code>文件复制到bin目录下，并且重启<code>redis</code>服务即可，在实际开发中，文件会存储在网络设备上，保障数据高可靠，如果因为某些原因导致<code>appendonly.aof</code>文件格式异常，从而导致数据还原失败，可以通过命令<code>redis-check-aof --fix appendonly.aof</code>进行修复</p>\n<p><strong>AOF的重写压缩机制：</strong></p>\n<p>AOF的工作原理将每次写操作追加到文件中，这样文件会出现很多冗余内容，所以redis新增了重写机制</p>\n<p>AOF可以生成一个新的AOF文件，新文件和老文件保存的信息一样，但体积更小，还可以做命令的合并，进而节省了redis的储存空间</p>\n<p><strong>AOF重写流程：</strong></p>\n<ul>\n<li>把主线程的内存拷贝一份给fork出来的<code>bgrewiteaof</code>子进程，这里面包含lredis最新的数据</li>\n<li>子进程将其中的数据进行重写。</li>\n<li>主线程在重写时候维护一个AOF重写缓冲区，将重写过程中的写操作记录，计入其中，保证重写后的AOF日志也能记录在重写过程中产生的新数据 </li>\n<li>用新AOF替换老AOF</li>\n</ul>\n<p><strong>AOF的优点和缺点：</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>优点</td>\n<td>数据的完整性和一致性更高</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td>因为AOF记录的内容多，文件只会越来越大，数据恢复也会越来越慢</td>\n</tr>\n</tbody></table>\n"},{"title":"threadPool","date":"2024-02-21T06:14:52.000Z","_content":"\n#### 线程池的核心参数以及具体场景下核心参数怎么设置合适\n\n- 核心线程数（Core Pool Size）：线程池中最小的线程数，即在线程池中一直保持的线程数量，不受空间时间的影响\n\n- 最大线程数（MaximumPoolSize）：线程池维护线程的最大数量\n\n- 空闲线程存活时间（Keep Alive Time）：当线程池中的线程数超过核心线程数时，多余的线程会被回收，此参数即为非核心线程的空闲时间，超过此时间将会被回收\n\n- 空闲线程存货单位（unit ）\n\n- 工作队列（Work Queue）：用于存储等待执行的任务队列，当线程池中的线程数达到核心线程数时，新的任务将被加入工作队列。\n\n- 拒绝策略（Reject Execution Handler）：当线程池和工作队列都已经达到最大容量，无法再接收新的任务时，拒绝策略将被触发，常见的拒绝策略有抛出异常，直接丢弃任务，丢弃队列中最老的任务等\n\n- 线程工厂（Thread Factory）：用于创建新的线程，可定制线程名字，线程组，优先级等\n\n  \n\n在不同的场景下设置核心参数，首先需要判断程序是CPU密集型还是I/O密集型，CPU密集型是指CPU使用频率较高，也就是CPU经常计算一些复杂的运算，逻辑处理等，这时候一般吧核心线程数设置为CPU核心数就行，如果是I/O密集型，核心线程数是CPU密集型的两倍","source":"_posts/threadPool.md","raw":"---\ntitle: threadPool\ndate: 2024-02-21 14:14:52\ntags: \n - 线程池\ncategories: \n - 多线程\n---\n\n#### 线程池的核心参数以及具体场景下核心参数怎么设置合适\n\n- 核心线程数（Core Pool Size）：线程池中最小的线程数，即在线程池中一直保持的线程数量，不受空间时间的影响\n\n- 最大线程数（MaximumPoolSize）：线程池维护线程的最大数量\n\n- 空闲线程存活时间（Keep Alive Time）：当线程池中的线程数超过核心线程数时，多余的线程会被回收，此参数即为非核心线程的空闲时间，超过此时间将会被回收\n\n- 空闲线程存货单位（unit ）\n\n- 工作队列（Work Queue）：用于存储等待执行的任务队列，当线程池中的线程数达到核心线程数时，新的任务将被加入工作队列。\n\n- 拒绝策略（Reject Execution Handler）：当线程池和工作队列都已经达到最大容量，无法再接收新的任务时，拒绝策略将被触发，常见的拒绝策略有抛出异常，直接丢弃任务，丢弃队列中最老的任务等\n\n- 线程工厂（Thread Factory）：用于创建新的线程，可定制线程名字，线程组，优先级等\n\n  \n\n在不同的场景下设置核心参数，首先需要判断程序是CPU密集型还是I/O密集型，CPU密集型是指CPU使用频率较高，也就是CPU经常计算一些复杂的运算，逻辑处理等，这时候一般吧核心线程数设置为CPU核心数就行，如果是I/O密集型，核心线程数是CPU密集型的两倍","slug":"threadPool","published":1,"updated":"2024-02-23T02:12:50.030Z","_id":"clsx20wzd000bj8clepht2luj","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"线程池的核心参数以及具体场景下核心参数怎么设置合适\"><a href=\"#线程池的核心参数以及具体场景下核心参数怎么设置合适\" class=\"headerlink\" title=\"线程池的核心参数以及具体场景下核心参数怎么设置合适\"></a>线程池的核心参数以及具体场景下核心参数怎么设置合适</h4><ul>\n<li><p>核心线程数（Core Pool Size）：线程池中最小的线程数，即在线程池中一直保持的线程数量，不受空间时间的影响</p>\n</li>\n<li><p>最大线程数（MaximumPoolSize）：线程池维护线程的最大数量</p>\n</li>\n<li><p>空闲线程存活时间（Keep Alive Time）：当线程池中的线程数超过核心线程数时，多余的线程会被回收，此参数即为非核心线程的空闲时间，超过此时间将会被回收</p>\n</li>\n<li><p>空闲线程存货单位（unit ）</p>\n</li>\n<li><p>工作队列（Work Queue）：用于存储等待执行的任务队列，当线程池中的线程数达到核心线程数时，新的任务将被加入工作队列。</p>\n</li>\n<li><p>拒绝策略（Reject Execution Handler）：当线程池和工作队列都已经达到最大容量，无法再接收新的任务时，拒绝策略将被触发，常见的拒绝策略有抛出异常，直接丢弃任务，丢弃队列中最老的任务等</p>\n</li>\n<li><p>线程工厂（Thread Factory）：用于创建新的线程，可定制线程名字，线程组，优先级等</p>\n</li>\n</ul>\n<p>在不同的场景下设置核心参数，首先需要判断程序是CPU密集型还是I&#x2F;O密集型，CPU密集型是指CPU使用频率较高，也就是CPU经常计算一些复杂的运算，逻辑处理等，这时候一般吧核心线程数设置为CPU核心数就行，如果是I&#x2F;O密集型，核心线程数是CPU密集型的两倍</p>\n","site":{"data":{}},"length":551,"excerpt":"","more":"<h4 id=\"线程池的核心参数以及具体场景下核心参数怎么设置合适\"><a href=\"#线程池的核心参数以及具体场景下核心参数怎么设置合适\" class=\"headerlink\" title=\"线程池的核心参数以及具体场景下核心参数怎么设置合适\"></a>线程池的核心参数以及具体场景下核心参数怎么设置合适</h4><ul>\n<li><p>核心线程数（Core Pool Size）：线程池中最小的线程数，即在线程池中一直保持的线程数量，不受空间时间的影响</p>\n</li>\n<li><p>最大线程数（MaximumPoolSize）：线程池维护线程的最大数量</p>\n</li>\n<li><p>空闲线程存活时间（Keep Alive Time）：当线程池中的线程数超过核心线程数时，多余的线程会被回收，此参数即为非核心线程的空闲时间，超过此时间将会被回收</p>\n</li>\n<li><p>空闲线程存货单位（unit ）</p>\n</li>\n<li><p>工作队列（Work Queue）：用于存储等待执行的任务队列，当线程池中的线程数达到核心线程数时，新的任务将被加入工作队列。</p>\n</li>\n<li><p>拒绝策略（Reject Execution Handler）：当线程池和工作队列都已经达到最大容量，无法再接收新的任务时，拒绝策略将被触发，常见的拒绝策略有抛出异常，直接丢弃任务，丢弃队列中最老的任务等</p>\n</li>\n<li><p>线程工厂（Thread Factory）：用于创建新的线程，可定制线程名字，线程组，优先级等</p>\n</li>\n</ul>\n<p>在不同的场景下设置核心参数，首先需要判断程序是CPU密集型还是I&#x2F;O密集型，CPU密集型是指CPU使用频率较高，也就是CPU经常计算一些复杂的运算，逻辑处理等，这时候一般吧核心线程数设置为CPU核心数就行，如果是I&#x2F;O密集型，核心线程数是CPU密集型的两倍</p>\n"},{"title":"指令信息","date":"2023-09-16T06:01:56.000Z","password":"yuan","abstract":"这里有一些加密的东西,密码需要继续阅读。","message":"加密文章，请向管理员索取密码","wrong_pass_message":"密码无效。请检查一下再试一次。","_content":"\n### 服务器指令：\n\n#### 防火墙指令：\n\n查询指定端口是否已开 firewall-cmd --query-port=666/tcp\n\n查询所有开启的端口  firewall-cmd --list-port\n\n查看版本： firewall-cmd --version\n\n显示状态： firewall-cmd --state\n\n开启防火墙 systemctl start firewalld\n\n(若遇到无法开启先用：systemctl unmask firewalld.service\n\n然后：systemctl start firewalld.service)\n\n关闭防火墙 systemctl stop firewalld\n\n开启端口命令  \n\n添加  firewall-cmd --zone=public --add-port=8001/tcp --permanent\n\n重新载入  firewall-cmd --reload\n\n查看某个端口是否开启    firewall-cmd --zone= public --query-port=8001/tcp\n\n删除    firewall-cmd --zone= public --remove-port=80/tcp --permanent\n\n\n\n#### nacos指令：\n\n查看nacos集群启动nacos个数\n\nps -ef |grep nacos |grep -v grep|wc -l\n\n复制cluster.conf.example并重命名为cluster.conf\n\ncp cluster.conf.example cluster.conf\n\n\n\n#### nginx指令:\n\n(sbin目录下)\n\n查看nginx版本号:\t./nginx -v\n\n关闭nginx:\t./nginx -s stop\n\n启动nginx:\t./nginx\n\n重新加载：./nginx -s reload\n\n#### mq指令：\n\n安装mq后测试发送消息和接收消息\n\n发送消息方：\n\n​\t1.设置环境变量\n\n​\texport NAMESRV_ADDR=localhost:9876\n\n​\t2.使用安装包的Demo发送消息\n\n​\tsh tools.sh org.apache.rocketmq.example.quickstart.Producer\n\n接收消息方：\n\n​\t1.设置环境变量\n\n​\texport NAMESRV_ADDR=localhost:9876\n\n​\t2.接收消息\t\n\n​\tsh tools.sh org.apache.rocketmq.example.quickstart.Consumer\n\n### cmd指令\n\n#### cmd查看WiFi密码\n\n展示连接所有的wifi：netsh wlan show profiles\n\n查看连接wifi密码：netsh wlan show profiles name=\"wifi名称\" key=clear\n\n","source":"_posts/instruct.md","raw":"---\ntitle: 指令信息\ndate: 2023-09-16 14:01:56\ntags: \n - 指令\ncategories: \n - 加密\npassword: yuan\nabstract: 这里有一些加密的东西,密码需要继续阅读。\nmessage: 加密文章，请向管理员索取密码\nwrong_pass_message: 密码无效。请检查一下再试一次。\n---\n\n### 服务器指令：\n\n#### 防火墙指令：\n\n查询指定端口是否已开 firewall-cmd --query-port=666/tcp\n\n查询所有开启的端口  firewall-cmd --list-port\n\n查看版本： firewall-cmd --version\n\n显示状态： firewall-cmd --state\n\n开启防火墙 systemctl start firewalld\n\n(若遇到无法开启先用：systemctl unmask firewalld.service\n\n然后：systemctl start firewalld.service)\n\n关闭防火墙 systemctl stop firewalld\n\n开启端口命令  \n\n添加  firewall-cmd --zone=public --add-port=8001/tcp --permanent\n\n重新载入  firewall-cmd --reload\n\n查看某个端口是否开启    firewall-cmd --zone= public --query-port=8001/tcp\n\n删除    firewall-cmd --zone= public --remove-port=80/tcp --permanent\n\n\n\n#### nacos指令：\n\n查看nacos集群启动nacos个数\n\nps -ef |grep nacos |grep -v grep|wc -l\n\n复制cluster.conf.example并重命名为cluster.conf\n\ncp cluster.conf.example cluster.conf\n\n\n\n#### nginx指令:\n\n(sbin目录下)\n\n查看nginx版本号:\t./nginx -v\n\n关闭nginx:\t./nginx -s stop\n\n启动nginx:\t./nginx\n\n重新加载：./nginx -s reload\n\n#### mq指令：\n\n安装mq后测试发送消息和接收消息\n\n发送消息方：\n\n​\t1.设置环境变量\n\n​\texport NAMESRV_ADDR=localhost:9876\n\n​\t2.使用安装包的Demo发送消息\n\n​\tsh tools.sh org.apache.rocketmq.example.quickstart.Producer\n\n接收消息方：\n\n​\t1.设置环境变量\n\n​\texport NAMESRV_ADDR=localhost:9876\n\n​\t2.接收消息\t\n\n​\tsh tools.sh org.apache.rocketmq.example.quickstart.Consumer\n\n### cmd指令\n\n#### cmd查看WiFi密码\n\n展示连接所有的wifi：netsh wlan show profiles\n\n查看连接wifi密码：netsh wlan show profiles name=\"wifi名称\" key=clear\n\n","slug":"instruct","published":1,"updated":"2024-02-23T06:03:52.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clsy9j3k20000x8clcar56ytl","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"密码无效。请检查一下再试一次。\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"2359b699dc867c9644236e2a1b365fad22e9e76bbe1579ee7ef9553feca3f0d3\">4890d010c58333ea052cb777f1cf210cfb0a0cf4dd72c6ed32370ae574366c2dd982fe766ba2d880b8b1c44fb54367e8fc85c28f29f457108b93f4152535a8fcb0306efadc304c2c4d289d250f570815107f4d09c0b167900a738e952490c9cf3ee79c7d8564dfd047a0543a1fdcba779db7709d635a84a6194c65cc07defb89d866b974aac292de53ebfbbe03b182f0a44842e65aa423c0e525aad643815c8d60f8f1b1a6989f42a163eef0d758bad8d4e280d4ad10341107d4ededaf443682db0d7585bdfa1e48cb52ed94d26debd5ab5f2b35d1289528fc949551bb234e3f8ace276b1f8dea08580c6d987bceb766d71a97b7f4245254ed7d57ed729e48b7f948887536ebea720e003219301441e61cec531f6c783d773d76f13c05d94bbfd08c1755762a99d257a15339e070cab2d5def8291abe1fc85c39d103c0b1b7760860ca205fb47134aefbbd3a09780ba40213d07edbd353cfc3def94638790c969dadadb7d24a32f836e4afff2806c5cb9c02400cfa7c57022a757ceb35a074b1e6ac648eed084d351256725a94f8455c1b59b04631568ee39d812044c10a7ac978eadefa3e59b5ccff3ff6bef3008fca11322e202b3e7a79d82e30a6f4dd7f4e469c715b21b4990b9b983e055ab09018712d3d94e25a09887902aa4087fa17ebc98d2e3af0ac23ff33a9ed195b3998f588904e9fd29b8dc43f98cccd57267517bf413b55095bd1baff5f942683a6ca2a6b2f8b208ece9f03dd80a0ef07dd5deb58887378321f132e21f2161d74f2990ba5d5e777d6a0d82d8edb7f574730e7581ae682401236b84d67ed2394ad541a37888c215c9b30f8b666d9efd14733523d8a1f51a9fcba58be04c0dc61c198a2deb29e4fa3f9b5aeca9d69d0277d22b94e5d1db532908160bf18d61da7f3f29af4a428aebfefff4758ed5a99f7d21e3e7cb391bf41ad0f28e958de3679074c73b88a519d6d2e83b1659678171eb4433990792c9b47a90e2d6b9166e37cb77257684e5be33c5404b5f4af910902d43ee9aacb4dd026d24161d44c36952e8d931b9b8eb51e2cca7182bf7761e25ba4b3d687124fe887ef21c364a375ee73e25c186ac9a2a86a979af010a7711ef816276e4ce36293cffa6ddcf0e8cec0860c6ba805df8bf8092919b0887bab3b44d39cd33a0be7430fa3980ed06f546a1e2354d24da0effaf1687554bdabcd84ae042985a06fb6598222958e40cc21c5217eee9c261070d6fdcf20fd0ecf9db04e99b746c0afabafe9d911245171248c0ec3f612609fa3b645405c2c278983fca3a6ffbd0216b41b2fb5b4b64acfe1a8d0571c6ae91eeabbbc4dbe1c963100f2676f293d301bafd8d679d60725e316a0e52e8b2130f60f70d760b6e5c9bf8f98f89a696e3ca32bbce4c1f1a3469f0a0af232d39cd6fa881bd8d27b905c87b6fe790b16b8dba3fbec2d2d55dca416e46bf33d0688b89f4dde469e8aca370fa2d7bce55d2e4d91384871cd5a8a9b56fa8547167b223c7d28c047b59ae4571a8594a336492df365145a2c2768fdec284c81fa9b15102cf98ff6427d247386014837e1f2a3fdce0a63d0701ad5e54d9dc08429a62db48901d0afabcb59d298a27aee65be12b60b4d66f97813878ffba30762a4498e4622b98e4aec97f0e54b5a41223a6d07436c3e22b9762b8f17a7c4194965a0a235dd5c1c6dece70378ecf823dce70ed5483245bd966b73ed023878980405a8bbb9a9d5799eca8b76d8ecb1c4abeb3eb385d41e7903625f413cda8712ec995f7d7781f2c96e5fa30a63c29dc513e39ee95e075dc871703896b61af62183c54ec56419fd4d567b24e2f4c049d1aff852e3383969dd8cc9bc8d34051528f8a51eec46f7324e8363a3b7508e6fb0a3f602c9700cbd9dd06a12604143fbbc3c9cb4e23a933da9a6a5d8a1da5e86993170bc4da55719a00fab3f7bc176107ab2df07acfb3304fe1a0ca44278a48c4d8553b8a6c6edc855439609a07cc6c20c9e77274a4b4b1e1d105e30772b210203def285268c1a729f5a5fa4f1612b7eded78c924183a8b35fc6e2646bda2dd902023b12e0a61bb017b5ee82a1ed47e481353b124fc8a16363e0877e55dd6e4d1b03cdc5dfae9a94aa919ddd34652e73c9475d2fbe28c16091a75a5568538e8cd59cef3d6f0ef877bb48b392c3f34ee1e2b121bd7183b68551138d233f2b3ac1a7134c3a56d056467dd2aea282e9a5bb99d7f451899bfbf073f8a5109ec7ef18df10519e215e2fb395c885811b95e8f87c050cf998830d4da649fe0d4913f72ed11869f06ee6aa63c585b0e3437653766d81b1e80788e7e7d1e6a24314d915bd47517aaed4e04d6d43994bff6dde35023aaf530a29ec24c39629a3766714c285f02409f96f62bb262e6591d1f81d12009ad49f7ce78eff6857979c6dc2e4191206363becde681270510e08e5849ac15dfb987af562c65a36ad8e5baac7c7ce2a1e39ea6224b8ad9e61a0f511776fb3782a87d1c122701377287259284eceb1746c427aa2260bb71d02aa45e6bad7869e6f98ba95e8e617b14bf07ef70e795fcd062d759bff3b01095e831d0144a866a055329bba9076ab77fa61cc3c67a4043ab7486fefe58de96e9ed7a8c807e9068478a817e1b0450f2d25d40ed3e02b127444d82c69bcf87f37452cda7e16743959e9fbb14724295ed6fabcff24f83260c7fc36ca97e632670e6b12edd0d930fac6aeefadfc439ab20d76132880998e87f68c94ff5f49d079e8ff1eedf6b30330fd60b81d3e3f96faa2a858e37bf54c6b260689c7a68be9d4e2c57f342ea643a5689c7129ce3ded0eabc901bd25f69a0754919f4d85d8609290c4bf468fe644c7c31ed7749de8f897aaef183125568c518785161c1280742811a80b11a7bc943b4f75b39423705f54d56567e8f8563f4088f04404da35ec19bf1e3a776bdd300cd1502152daf807e8e8f72dcc204a921f667dcfc8f852d100127e0a6085b8b375d5d5dc4d43a5bc56e00120ccc5b0de299a2db67531b506287ac97eba12b1a0094ca4b2d3ba1399f7fb6d8c82397ef756100aadc2ac505ae98967d21107c7b3fbebe2def8a7dec47898ed31d684685ce5cdb6275fd7a490505d644b9685cce02319d6afeaed5b5d3c94a0b48e6c4a73e119d5656dcdcd7bdbce367291ea5ce85ba560e1061d64e1d35daf751641a8923ed456ca6fc4301cca06df5c6c713b11213407a425f5866ef15e92afc1c750f5805dad0b70b53a03c580a88799326765d896c3658302aeb0cf20c69514a601cfb16f58ee65ffa5bfc1f79de9af2bbe5354935e60792221c013b17a863fc65581c4a12d0d1b7b68b84c1fb43c7431642c0034dc175bb1212eac9d5142daae62143a2bd559a1317f71a59e4b36d3a3bd2e44d68cd82ea98a0124f8a600e364fc3c9cc1f97d7e4589bad44bf3bcb23879ad1b21866b4fad8c3fe6ec5acc02becf05435b05a574115876eb89dca1ddaaf1519d8c9c52e39c56f35dab0959cf64d83d77ed6d769ad2ac073b63046def22a17c129da0b39fe2989dfe4b440d9191cba0aea534d4031b84a3e46a5181b5a3319fab054416b835b38c671d6948e8a3c7965d43ff7c182260b739878fc2a48e56a651989a921e7d39782788cabe3db7ba9956fcaa990a9447685bb4f552ca7de78db9b3183bacff0456d2a60d0f064e9dc54e0fdfc13dda027c9e82678da1a356e6764e39e424f8f324c0d53fa4b5a4d6e1851157696debc49bdcea78433392739895eaa3c550baef5ee9c947db646eac9ff2dead558c3488a096e44b0c18366ac2eed85f023440986a53</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">加密文章，请向管理员索取密码</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"length":1137,"excerpt":"这里有一些加密的东西,密码需要继续阅读。","more":"这里有一些加密的东西,密码需要继续阅读。","origin":"<h3 id=\"服务器指令：\"><a href=\"#服务器指令：\" class=\"headerlink\" title=\"服务器指令：\"></a>服务器指令：</h3><h4 id=\"防火墙指令：\"><a href=\"#防火墙指令：\" class=\"headerlink\" title=\"防火墙指令：\"></a>防火墙指令：</h4><p>查询指定端口是否已开 firewall-cmd –query-port&#x3D;666&#x2F;tcp</p>\n<p>查询所有开启的端口  firewall-cmd –list-port</p>\n<p>查看版本： firewall-cmd –version</p>\n<p>显示状态： firewall-cmd –state</p>\n<p>开启防火墙 systemctl start firewalld</p>\n<p>(若遇到无法开启先用：systemctl unmask firewalld.service</p>\n<p>然后：systemctl start firewalld.service)</p>\n<p>关闭防火墙 systemctl stop firewalld</p>\n<p>开启端口命令  </p>\n<p>添加  firewall-cmd –zone&#x3D;public –add-port&#x3D;8001&#x2F;tcp –permanent</p>\n<p>重新载入  firewall-cmd –reload</p>\n<p>查看某个端口是否开启    firewall-cmd –zone&#x3D; public –query-port&#x3D;8001&#x2F;tcp</p>\n<p>删除    firewall-cmd –zone&#x3D; public –remove-port&#x3D;80&#x2F;tcp –permanent</p>\n<h4 id=\"nacos指令：\"><a href=\"#nacos指令：\" class=\"headerlink\" title=\"nacos指令：\"></a>nacos指令：</h4><p>查看nacos集群启动nacos个数</p>\n<p>ps -ef |grep nacos |grep -v grep|wc -l</p>\n<p>复制cluster.conf.example并重命名为cluster.conf</p>\n<p>cp cluster.conf.example cluster.conf</p>\n<h4 id=\"nginx指令\"><a href=\"#nginx指令\" class=\"headerlink\" title=\"nginx指令:\"></a>nginx指令:</h4><p>(sbin目录下)</p>\n<p>查看nginx版本号:\t.&#x2F;nginx -v</p>\n<p>关闭nginx:\t.&#x2F;nginx -s stop</p>\n<p>启动nginx:\t.&#x2F;nginx</p>\n<p>重新加载：.&#x2F;nginx -s reload</p>\n<h4 id=\"mq指令：\"><a href=\"#mq指令：\" class=\"headerlink\" title=\"mq指令：\"></a>mq指令：</h4><p>安装mq后测试发送消息和接收消息</p>\n<p>发送消息方：</p>\n<p>​\t1.设置环境变量</p>\n<p>​\texport NAMESRV_ADDR&#x3D;localhost:9876</p>\n<p>​\t2.使用安装包的Demo发送消息</p>\n<p>​\tsh tools.sh org.apache.rocketmq.example.quickstart.Producer</p>\n<p>接收消息方：</p>\n<p>​\t1.设置环境变量</p>\n<p>​\texport NAMESRV_ADDR&#x3D;localhost:9876</p>\n<p>​\t2.接收消息\t</p>\n<p>​\tsh tools.sh org.apache.rocketmq.example.quickstart.Consumer</p>\n<h3 id=\"cmd指令\"><a href=\"#cmd指令\" class=\"headerlink\" title=\"cmd指令\"></a>cmd指令</h3><h4 id=\"cmd查看WiFi密码\"><a href=\"#cmd查看WiFi密码\" class=\"headerlink\" title=\"cmd查看WiFi密码\"></a>cmd查看WiFi密码</h4><p>展示连接所有的wifi：netsh wlan show profiles</p>\n<p>查看连接wifi密码：netsh wlan show profiles name&#x3D;”wifi名称” key&#x3D;clear</p>\n","encrypt":true},{"title":"threadLifecycle","date":"2024-02-23T06:12:25.000Z","_content":"\n#### 进程与线程的区别\n\n1、本质不同\n\n进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元。\n\n2、数量不同\n\n同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。\n\n3、过程不同\n\n进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束。\n\n4、属性不同\n\n线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志。\n\n**进程：**是资源分配的最小单位，一个进程可以有多个线程，多个线程共享进程的堆和方法区资源，不共享栈、程序计数器\n\n**线程：**是任务调度和执行的最小单位，线程并行执行存在资源竞争和上下文切换的问题\n\n**协程：**是一种比线程更加轻量级的存在，正如一个进程可以拥有多个线程一样，一个线程可以拥有多个协程。\n\n\n\n#### 进程间通信方式IPC\n\n**管道pipe：**亲缘关系使用匿名管道，非亲缘关系使用命名管道，管道遵循FIFO，半双工，数据只能单向通信；\n\n**信号：**信号是一种比较复杂的通信方式，用户调用kill命令将信号发送给其他进程。\n\n**消息队列：**消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等特点。\n\n**共享内存(share memory)：**\n\n- 使得多个进程可以可以直接读写同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。\n- 由于多个进程共享一段内存，因此需要依靠某种同步机制（如信号量）来达到进程间的同步及互斥。\n\n**信号量(Semaphores) ：**信号量是⼀个计数器，⽤于多进程对共享数据的访问，这种通信⽅式主要⽤于解决与同步相关的问题并避免竞争条件。\n\n**套接字(Sockets) :** 简单的说就是通信的两⽅的⼀种约定，⽤套接字中的相关函数来完成通信过程。\n\n#### 并行与串行的区别\n\n串行就是在主线程上按顺序执行逻辑代码\n\n并行就是多个cpu同时工作来完成多个逻辑\n\n#### java实现多线程的三种的方式\n\n继承Thread类、实现Runnable接口、使用ExecutorService、Callable、Future实现有返回结果的多线程。其中前两种方式线程执行完后都没有返回值，只有最后一种是带返回值的。\n\n####  线程常用API\n\n| 方法            | 名称                                        |\n| --------------- | ------------------------------------------- |\n| start()         | 启动线程                                    |\n| currentThread() | 获取当前线程对象                            |\n| getId()         | 获取当前线程id                              |\n| getName()       | 获取当前线程名称                            |\n| sleep()         | 休眠线程                                    |\n| stop()          | 停止线程 --不安全 --不推荐使用              |\n| setDaemon()     | 改变线程状态:true-守护线程:flase-非守护线程 |\n| join()          | 线程执行优先级                              |\n\n#### 线程的生命周期\n\n当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经过 **新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）和死亡（Dead）5种状态**。尤其是当线程启动以后，它不可能一直\"霸占\"着CPU独自运行，所以CPU需要在多条线程之间切换，于是 线程状态也会多次在运行、阻塞之间切换。\n\n1.当程序使用new关键字创建了一个线程之后，该线程就处于 **新建状态**\n\n2.当线程对象调用了start()方法之后，该线程处于 **就绪状态**。\n\n3.当CPU开始调度处于 **就绪状态** 的线程时，此时线程获得了CPU时间片才得以真正开始执行run()方法的线程执行体，则该线程处于 **运行状态**。\n\n4.处于运行状态的线程在某些情况下，让出CPU并暂时停止自己的运行，进入 **阻塞状态**。\n\n5.线程会以下三种方式结束就会进入**死亡状态**\t\n\n​\trun()或call()方法执行完成，线程正常结束；\n\n​\t线程抛出一个未捕获的Exception或Error；\n\n​\t直接调用该线程stop()方法来结束该线程,—该方法容易导致死锁，通常不推荐使用；","source":"_posts/thread.md","raw":"---\ntitle: threadLifecycle\ndate: 2024-02-23 14:12:25\ntags: \n - 线程的生命周期\ncategories: \n - 线程\n---\n\n#### 进程与线程的区别\n\n1、本质不同\n\n进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元。\n\n2、数量不同\n\n同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。\n\n3、过程不同\n\n进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束。\n\n4、属性不同\n\n线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志。\n\n**进程：**是资源分配的最小单位，一个进程可以有多个线程，多个线程共享进程的堆和方法区资源，不共享栈、程序计数器\n\n**线程：**是任务调度和执行的最小单位，线程并行执行存在资源竞争和上下文切换的问题\n\n**协程：**是一种比线程更加轻量级的存在，正如一个进程可以拥有多个线程一样，一个线程可以拥有多个协程。\n\n\n\n#### 进程间通信方式IPC\n\n**管道pipe：**亲缘关系使用匿名管道，非亲缘关系使用命名管道，管道遵循FIFO，半双工，数据只能单向通信；\n\n**信号：**信号是一种比较复杂的通信方式，用户调用kill命令将信号发送给其他进程。\n\n**消息队列：**消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等特点。\n\n**共享内存(share memory)：**\n\n- 使得多个进程可以可以直接读写同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。\n- 由于多个进程共享一段内存，因此需要依靠某种同步机制（如信号量）来达到进程间的同步及互斥。\n\n**信号量(Semaphores) ：**信号量是⼀个计数器，⽤于多进程对共享数据的访问，这种通信⽅式主要⽤于解决与同步相关的问题并避免竞争条件。\n\n**套接字(Sockets) :** 简单的说就是通信的两⽅的⼀种约定，⽤套接字中的相关函数来完成通信过程。\n\n#### 并行与串行的区别\n\n串行就是在主线程上按顺序执行逻辑代码\n\n并行就是多个cpu同时工作来完成多个逻辑\n\n#### java实现多线程的三种的方式\n\n继承Thread类、实现Runnable接口、使用ExecutorService、Callable、Future实现有返回结果的多线程。其中前两种方式线程执行完后都没有返回值，只有最后一种是带返回值的。\n\n####  线程常用API\n\n| 方法            | 名称                                        |\n| --------------- | ------------------------------------------- |\n| start()         | 启动线程                                    |\n| currentThread() | 获取当前线程对象                            |\n| getId()         | 获取当前线程id                              |\n| getName()       | 获取当前线程名称                            |\n| sleep()         | 休眠线程                                    |\n| stop()          | 停止线程 --不安全 --不推荐使用              |\n| setDaemon()     | 改变线程状态:true-守护线程:flase-非守护线程 |\n| join()          | 线程执行优先级                              |\n\n#### 线程的生命周期\n\n当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经过 **新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）和死亡（Dead）5种状态**。尤其是当线程启动以后，它不可能一直\"霸占\"着CPU独自运行，所以CPU需要在多条线程之间切换，于是 线程状态也会多次在运行、阻塞之间切换。\n\n1.当程序使用new关键字创建了一个线程之后，该线程就处于 **新建状态**\n\n2.当线程对象调用了start()方法之后，该线程处于 **就绪状态**。\n\n3.当CPU开始调度处于 **就绪状态** 的线程时，此时线程获得了CPU时间片才得以真正开始执行run()方法的线程执行体，则该线程处于 **运行状态**。\n\n4.处于运行状态的线程在某些情况下，让出CPU并暂时停止自己的运行，进入 **阻塞状态**。\n\n5.线程会以下三种方式结束就会进入**死亡状态**\t\n\n​\trun()或call()方法执行完成，线程正常结束；\n\n​\t线程抛出一个未捕获的Exception或Error；\n\n​\t直接调用该线程stop()方法来结束该线程,—该方法容易导致死锁，通常不推荐使用；","slug":"thread","published":1,"updated":"2024-02-23T11:02:06.859Z","_id":"clsy9j3k60001x8clesj5guqd","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"进程与线程的区别\"><a href=\"#进程与线程的区别\" class=\"headerlink\" title=\"进程与线程的区别\"></a>进程与线程的区别</h4><p>1、本质不同</p>\n<p>进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元。</p>\n<p>2、数量不同</p>\n<p>同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。</p>\n<p>3、过程不同</p>\n<p>进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束。</p>\n<p>4、属性不同</p>\n<p>线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志。</p>\n<p><strong>进程：</strong>是资源分配的最小单位，一个进程可以有多个线程，多个线程共享进程的堆和方法区资源，不共享栈、程序计数器</p>\n<p><strong>线程：</strong>是任务调度和执行的最小单位，线程并行执行存在资源竞争和上下文切换的问题</p>\n<p><strong>协程：</strong>是一种比线程更加轻量级的存在，正如一个进程可以拥有多个线程一样，一个线程可以拥有多个协程。</p>\n<h4 id=\"进程间通信方式IPC\"><a href=\"#进程间通信方式IPC\" class=\"headerlink\" title=\"进程间通信方式IPC\"></a>进程间通信方式IPC</h4><p><strong>管道pipe：</strong>亲缘关系使用匿名管道，非亲缘关系使用命名管道，管道遵循FIFO，半双工，数据只能单向通信；</p>\n<p><strong>信号：</strong>信号是一种比较复杂的通信方式，用户调用kill命令将信号发送给其他进程。</p>\n<p><strong>消息队列：</strong>消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等特点。</p>\n<p><strong>共享内存(share memory)：</strong></p>\n<ul>\n<li>使得多个进程可以可以直接读写同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。</li>\n<li>由于多个进程共享一段内存，因此需要依靠某种同步机制（如信号量）来达到进程间的同步及互斥。</li>\n</ul>\n<p><strong>信号量(Semaphores) ：</strong>信号量是⼀个计数器，⽤于多进程对共享数据的访问，这种通信⽅式主要⽤于解决与同步相关的问题并避免竞争条件。</p>\n<p><strong>套接字(Sockets) :</strong> 简单的说就是通信的两⽅的⼀种约定，⽤套接字中的相关函数来完成通信过程。</p>\n<h4 id=\"并行与串行的区别\"><a href=\"#并行与串行的区别\" class=\"headerlink\" title=\"并行与串行的区别\"></a>并行与串行的区别</h4><p>串行就是在主线程上按顺序执行逻辑代码</p>\n<p>并行就是多个cpu同时工作来完成多个逻辑</p>\n<h4 id=\"java实现多线程的三种的方式\"><a href=\"#java实现多线程的三种的方式\" class=\"headerlink\" title=\"java实现多线程的三种的方式\"></a>java实现多线程的三种的方式</h4><p>继承Thread类、实现Runnable接口、使用ExecutorService、Callable、Future实现有返回结果的多线程。其中前两种方式线程执行完后都没有返回值，只有最后一种是带返回值的。</p>\n<h4 id=\"线程常用API\"><a href=\"#线程常用API\" class=\"headerlink\" title=\"线程常用API\"></a>线程常用API</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>start()</td>\n<td>启动线程</td>\n</tr>\n<tr>\n<td>currentThread()</td>\n<td>获取当前线程对象</td>\n</tr>\n<tr>\n<td>getId()</td>\n<td>获取当前线程id</td>\n</tr>\n<tr>\n<td>getName()</td>\n<td>获取当前线程名称</td>\n</tr>\n<tr>\n<td>sleep()</td>\n<td>休眠线程</td>\n</tr>\n<tr>\n<td>stop()</td>\n<td>停止线程 –不安全 –不推荐使用</td>\n</tr>\n<tr>\n<td>setDaemon()</td>\n<td>改变线程状态:true-守护线程:flase-非守护线程</td>\n</tr>\n<tr>\n<td>join()</td>\n<td>线程执行优先级</td>\n</tr>\n</tbody></table>\n<h4 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h4><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经过 <strong>新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）和死亡（Dead）5种状态</strong>。尤其是当线程启动以后，它不可能一直”霸占”着CPU独自运行，所以CPU需要在多条线程之间切换，于是 线程状态也会多次在运行、阻塞之间切换。</p>\n<p>1.当程序使用new关键字创建了一个线程之后，该线程就处于 <strong>新建状态</strong></p>\n<p>2.当线程对象调用了start()方法之后，该线程处于 <strong>就绪状态</strong>。</p>\n<p>3.当CPU开始调度处于 <strong>就绪状态</strong> 的线程时，此时线程获得了CPU时间片才得以真正开始执行run()方法的线程执行体，则该线程处于 <strong>运行状态</strong>。</p>\n<p>4.处于运行状态的线程在某些情况下，让出CPU并暂时停止自己的运行，进入 <strong>阻塞状态</strong>。</p>\n<p>5.线程会以下三种方式结束就会进入<strong>死亡状态</strong>\t</p>\n<p>​\trun()或call()方法执行完成，线程正常结束；</p>\n<p>​\t线程抛出一个未捕获的Exception或Error；</p>\n<p>​\t直接调用该线程stop()方法来结束该线程,—该方法容易导致死锁，通常不推荐使用；</p>\n","site":{"data":{}},"length":1601,"excerpt":"","more":"<h4 id=\"进程与线程的区别\"><a href=\"#进程与线程的区别\" class=\"headerlink\" title=\"进程与线程的区别\"></a>进程与线程的区别</h4><p>1、本质不同</p>\n<p>进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元。</p>\n<p>2、数量不同</p>\n<p>同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进行至少包括一个线程。</p>\n<p>3、过程不同</p>\n<p>进程的创建调用fork或者vfork，而线程的创建调用pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束。</p>\n<p>4、属性不同</p>\n<p>线程有自己的私有属性TCB，线程id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志。</p>\n<p><strong>进程：</strong>是资源分配的最小单位，一个进程可以有多个线程，多个线程共享进程的堆和方法区资源，不共享栈、程序计数器</p>\n<p><strong>线程：</strong>是任务调度和执行的最小单位，线程并行执行存在资源竞争和上下文切换的问题</p>\n<p><strong>协程：</strong>是一种比线程更加轻量级的存在，正如一个进程可以拥有多个线程一样，一个线程可以拥有多个协程。</p>\n<h4 id=\"进程间通信方式IPC\"><a href=\"#进程间通信方式IPC\" class=\"headerlink\" title=\"进程间通信方式IPC\"></a>进程间通信方式IPC</h4><p><strong>管道pipe：</strong>亲缘关系使用匿名管道，非亲缘关系使用命名管道，管道遵循FIFO，半双工，数据只能单向通信；</p>\n<p><strong>信号：</strong>信号是一种比较复杂的通信方式，用户调用kill命令将信号发送给其他进程。</p>\n<p><strong>消息队列：</strong>消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等特点。</p>\n<p><strong>共享内存(share memory)：</strong></p>\n<ul>\n<li>使得多个进程可以可以直接读写同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。</li>\n<li>由于多个进程共享一段内存，因此需要依靠某种同步机制（如信号量）来达到进程间的同步及互斥。</li>\n</ul>\n<p><strong>信号量(Semaphores) ：</strong>信号量是⼀个计数器，⽤于多进程对共享数据的访问，这种通信⽅式主要⽤于解决与同步相关的问题并避免竞争条件。</p>\n<p><strong>套接字(Sockets) :</strong> 简单的说就是通信的两⽅的⼀种约定，⽤套接字中的相关函数来完成通信过程。</p>\n<h4 id=\"并行与串行的区别\"><a href=\"#并行与串行的区别\" class=\"headerlink\" title=\"并行与串行的区别\"></a>并行与串行的区别</h4><p>串行就是在主线程上按顺序执行逻辑代码</p>\n<p>并行就是多个cpu同时工作来完成多个逻辑</p>\n<h4 id=\"java实现多线程的三种的方式\"><a href=\"#java实现多线程的三种的方式\" class=\"headerlink\" title=\"java实现多线程的三种的方式\"></a>java实现多线程的三种的方式</h4><p>继承Thread类、实现Runnable接口、使用ExecutorService、Callable、Future实现有返回结果的多线程。其中前两种方式线程执行完后都没有返回值，只有最后一种是带返回值的。</p>\n<h4 id=\"线程常用API\"><a href=\"#线程常用API\" class=\"headerlink\" title=\"线程常用API\"></a>线程常用API</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>start()</td>\n<td>启动线程</td>\n</tr>\n<tr>\n<td>currentThread()</td>\n<td>获取当前线程对象</td>\n</tr>\n<tr>\n<td>getId()</td>\n<td>获取当前线程id</td>\n</tr>\n<tr>\n<td>getName()</td>\n<td>获取当前线程名称</td>\n</tr>\n<tr>\n<td>sleep()</td>\n<td>休眠线程</td>\n</tr>\n<tr>\n<td>stop()</td>\n<td>停止线程 –不安全 –不推荐使用</td>\n</tr>\n<tr>\n<td>setDaemon()</td>\n<td>改变线程状态:true-守护线程:flase-非守护线程</td>\n</tr>\n<tr>\n<td>join()</td>\n<td>线程执行优先级</td>\n</tr>\n</tbody></table>\n<h4 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h4><p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。在线程的生命周期中，它要经过 <strong>新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）和死亡（Dead）5种状态</strong>。尤其是当线程启动以后，它不可能一直”霸占”着CPU独自运行，所以CPU需要在多条线程之间切换，于是 线程状态也会多次在运行、阻塞之间切换。</p>\n<p>1.当程序使用new关键字创建了一个线程之后，该线程就处于 <strong>新建状态</strong></p>\n<p>2.当线程对象调用了start()方法之后，该线程处于 <strong>就绪状态</strong>。</p>\n<p>3.当CPU开始调度处于 <strong>就绪状态</strong> 的线程时，此时线程获得了CPU时间片才得以真正开始执行run()方法的线程执行体，则该线程处于 <strong>运行状态</strong>。</p>\n<p>4.处于运行状态的线程在某些情况下，让出CPU并暂时停止自己的运行，进入 <strong>阻塞状态</strong>。</p>\n<p>5.线程会以下三种方式结束就会进入<strong>死亡状态</strong>\t</p>\n<p>​\trun()或call()方法执行完成，线程正常结束；</p>\n<p>​\t线程抛出一个未捕获的Exception或Error；</p>\n<p>​\t直接调用该线程stop()方法来结束该线程,—该方法容易导致死锁，通常不推荐使用；</p>\n"},{"title":"linuxOrder","date":"2023-09-12T02:25:56.000Z","_content":"\n## 1．Linux管理文件和目录的命令\n\n| 命令  | 功能               |\n| ----- | ------------------ |\n| pwd   | 显当前目录         |\n| ls    | 查看目录下的内容   |\n| cd    | 改变所在目录       |\n| cat   | 显示文件的内容     |\n| grep  | 在文件中查找某字符 |\n| cp    | 复制文件           |\n| touch | 创建文件           |\n| mv    | 移动文件           |\n| rm    | 删除文件           |\n| rmdir | 删除目录           |\n| vi    | 编辑文件           |\n\n### 1.1 pwd命令\n\n该命令的英文解释为print working directory(打印工作目录)。输入pwd命令，Linux会输出当前目录。\n\n### 1.2 cd命令 用来改变所在目录。\n\ncd / 转到根目录中\n\t\tcd ~ 转到/home/user用户目录下\n\t\tcd /usr 转到根目录下的usr目录中-------------绝对路径\n\t\tcd test 转到当前目录下的test子目录中-------相对路径\n\n### 1.3 ls命令 用来查看目录的内容。\n\n选项 含义\n\t\t-a 列举目录中的全部文件，包括隐藏文件\n\t\t-l 列举目录中的细节，包括权限、所有者、组群、大小、创建日期、文件是否是链接等\n\t\t-f 列举的文件显示文件类型\n\t\t-r 逆向，从后向前地列举目录中内容\n\t\t-R 递归，该选项递归地列举当前目录下所有子目录内的内容\n\t\t-s 大小，按文件大小排序\n\t\t-h 以人类可读的方式显示文件的大小，如用K、M、G作单位\n\nls -l examples.doc 列举文件examples.doc的所有信息\n\n### 1.4 cat命令\n\ncat命令可以用来合并文件，也可以用来在屏幕上显示整个文件的内容。\n\t\tcat snow.txt 该命令显示文件snow.txt的内容，ctrl+D退出cat。\n\n### 1.5 grep命令 最大功能是在一堆文件中查找一个特定的字符串。\n\ngrep money test.txt\n\t\t以上命令在test.txt中查找money这个字符串，grep查找是区分大小写的。\n\n### 1.6 touch命令\n\ntouch命令用来创建新文件，他可以创建一个空白的文件，可以在其中添加文本和数据。\n\t\ttouch newfile 该命令创建一个名为newfile的空白文件。\n\n### 1.7 cp命令 用来拷贝文件，要复制文件，输入命令：\n\ncp\n\t\tcp t.txt Document/t 该命令将把文件t.txt复制到Document目录下，并命名为t。\n\t\t选项 含义\n\t\t-I 互动：如果文件将覆盖目标中的文件，他会提示确认\n\t\t-r 递归：这个选项会复制整个目录树、子目录以及其他\n\t\t-v 详细：显示文件的复制进度\n\n### 1.8 mv命令 用来移动文件。\n\n选项 说明\n\t\t-I 互动：如果选择的文件会覆盖目标中的文件，他会提示确认\n\t\t-f 强制：它会超越互动模式，不提示地移动文件，属于很危险的选项\n\t\t-v 详细：显示文件的移动进度\n\t\tmv t.txt Document 把文件t.txt 移动到目录Document中。\n\n### 1.9 rm命令 用来删除文件。\n\n选项 说明\n\t\t-I 互动：提示确认删除\n\t\t-f 强制：代替互动模式，不提示确认删除\n\t\t-v 详细：显示文件的删除进度\n\t\t-r 递归：将删除某个目录以及其中所有的文件和子目录\n\t\trm t.txt 该命令删除文件t.txt\n\n### 1.10 rmdir命令 用来删除目录。\n\n### 1.11 find命令  用来查询文件\n\n**按照文件名搜索**\n\n选项：\n\t\t-name    按照文件名搜索\n\t\t-iname   按照文件名搜索，不区分文件名大小写\n\t\t-inum    按照inode号搜索\n\n如要在`/home/linuxize`目录下搜索一个名为`document.pdf`的文件，你可以使用下面的命令。\n\n> find /home/linuxize -type f -name document.pdf\n\n**按照文件类型搜索**\n\n选项：\n\t\t-type d  查找目录\n\t\t-type f  查找普通文件\n\t\t-type l  查找软链接文件\n\n例如，要在`/var/log/nginx`目录下找到所有以`.log.gz`结尾的文件，你可以使用一下命令\n\n> ​\tfind /var/log/nginx -type f -name '*.log.gz'\n\n**使用案例**\n\n> find -name java*                     # 在当前目录下查找以java开始的文件\n> \t\tfind -name java* fprint file         # 在当前目录下查找以java开始的文件，并把结果输出到file中\n> \t\tfind -name ap* -o -name may*         # 查找以ap或may开头的文件\n\n### 1.12 vi 是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。进入vi的命令\n\nvi filename :打开或新建文件,并将光标置于第一行首\n\t\tvi n filename ：打开文件,并将光标置于第n行首\n\t\tvi filename ：打开文件,并将光标置于一行首\n\t\tvi /pattern filename：打开文件,并将光标置于第一个与pattern匹配的串处\n\t\tvi -r filename ：在上次正用vi编辑时发生系统崩溃,恢复filename\n\t\tvi filename....filename ：打开多个文件,依次进行编辑\n\n屏幕翻滚类命令\n\t\tCtrl u：向文件首翻半屏\n\t\tCtrl d：向文件尾翻半屏\n\t\tCtrl f：向文件尾翻一屏\n\t\tCtrl＋b；向文件首翻一屏\n\t\tnz：将第n行滚至屏幕顶部,不指定n时将当前行滚至屏幕顶部.\n\t\t插入文本类命令\n\t\ti ：在光标前\n\t\tI ：在当前行首\n\t\ta：光标后\n\t\tA：在当前行尾\n\t\to：在当前行之下新开一行\n\t\tO：在当前行之上新开一行\n\t\tr：替换当前字符\n\t\tR：替换当前字符及其后的字符,直至按ESC键\n\t\ts：从当前光标位置处开始,以输入的文本替代指定数目的字符\n\n保存命令\n\t\t按ESC键 跳到命令模式，然后：\n\t\t:w 保存文件但不退出vi\n\t\t:w file 将修改另外保存到file中，不退出vi\n\t\t:w! 强制保存，不推出vi\n\t\t:wq 保存文件并退出vi\n\t\t:wq! 强制保存文件，并退出vi\n\t\t:q 不保存文件，退出vi\n\t\t:q! 不保存文件，强制退出vi\n\t\t:e! 放弃所有修改，从上次保存文件开始再编辑","source":"_posts/linuxOrder.md","raw":"---\ntitle: linuxOrder\ndate: 2023-09-12 10:25:56\ntags: \n - Linux常用命令\ncategories: \n - Linux\n---\n\n## 1．Linux管理文件和目录的命令\n\n| 命令  | 功能               |\n| ----- | ------------------ |\n| pwd   | 显当前目录         |\n| ls    | 查看目录下的内容   |\n| cd    | 改变所在目录       |\n| cat   | 显示文件的内容     |\n| grep  | 在文件中查找某字符 |\n| cp    | 复制文件           |\n| touch | 创建文件           |\n| mv    | 移动文件           |\n| rm    | 删除文件           |\n| rmdir | 删除目录           |\n| vi    | 编辑文件           |\n\n### 1.1 pwd命令\n\n该命令的英文解释为print working directory(打印工作目录)。输入pwd命令，Linux会输出当前目录。\n\n### 1.2 cd命令 用来改变所在目录。\n\ncd / 转到根目录中\n\t\tcd ~ 转到/home/user用户目录下\n\t\tcd /usr 转到根目录下的usr目录中-------------绝对路径\n\t\tcd test 转到当前目录下的test子目录中-------相对路径\n\n### 1.3 ls命令 用来查看目录的内容。\n\n选项 含义\n\t\t-a 列举目录中的全部文件，包括隐藏文件\n\t\t-l 列举目录中的细节，包括权限、所有者、组群、大小、创建日期、文件是否是链接等\n\t\t-f 列举的文件显示文件类型\n\t\t-r 逆向，从后向前地列举目录中内容\n\t\t-R 递归，该选项递归地列举当前目录下所有子目录内的内容\n\t\t-s 大小，按文件大小排序\n\t\t-h 以人类可读的方式显示文件的大小，如用K、M、G作单位\n\nls -l examples.doc 列举文件examples.doc的所有信息\n\n### 1.4 cat命令\n\ncat命令可以用来合并文件，也可以用来在屏幕上显示整个文件的内容。\n\t\tcat snow.txt 该命令显示文件snow.txt的内容，ctrl+D退出cat。\n\n### 1.5 grep命令 最大功能是在一堆文件中查找一个特定的字符串。\n\ngrep money test.txt\n\t\t以上命令在test.txt中查找money这个字符串，grep查找是区分大小写的。\n\n### 1.6 touch命令\n\ntouch命令用来创建新文件，他可以创建一个空白的文件，可以在其中添加文本和数据。\n\t\ttouch newfile 该命令创建一个名为newfile的空白文件。\n\n### 1.7 cp命令 用来拷贝文件，要复制文件，输入命令：\n\ncp\n\t\tcp t.txt Document/t 该命令将把文件t.txt复制到Document目录下，并命名为t。\n\t\t选项 含义\n\t\t-I 互动：如果文件将覆盖目标中的文件，他会提示确认\n\t\t-r 递归：这个选项会复制整个目录树、子目录以及其他\n\t\t-v 详细：显示文件的复制进度\n\n### 1.8 mv命令 用来移动文件。\n\n选项 说明\n\t\t-I 互动：如果选择的文件会覆盖目标中的文件，他会提示确认\n\t\t-f 强制：它会超越互动模式，不提示地移动文件，属于很危险的选项\n\t\t-v 详细：显示文件的移动进度\n\t\tmv t.txt Document 把文件t.txt 移动到目录Document中。\n\n### 1.9 rm命令 用来删除文件。\n\n选项 说明\n\t\t-I 互动：提示确认删除\n\t\t-f 强制：代替互动模式，不提示确认删除\n\t\t-v 详细：显示文件的删除进度\n\t\t-r 递归：将删除某个目录以及其中所有的文件和子目录\n\t\trm t.txt 该命令删除文件t.txt\n\n### 1.10 rmdir命令 用来删除目录。\n\n### 1.11 find命令  用来查询文件\n\n**按照文件名搜索**\n\n选项：\n\t\t-name    按照文件名搜索\n\t\t-iname   按照文件名搜索，不区分文件名大小写\n\t\t-inum    按照inode号搜索\n\n如要在`/home/linuxize`目录下搜索一个名为`document.pdf`的文件，你可以使用下面的命令。\n\n> find /home/linuxize -type f -name document.pdf\n\n**按照文件类型搜索**\n\n选项：\n\t\t-type d  查找目录\n\t\t-type f  查找普通文件\n\t\t-type l  查找软链接文件\n\n例如，要在`/var/log/nginx`目录下找到所有以`.log.gz`结尾的文件，你可以使用一下命令\n\n> ​\tfind /var/log/nginx -type f -name '*.log.gz'\n\n**使用案例**\n\n> find -name java*                     # 在当前目录下查找以java开始的文件\n> \t\tfind -name java* fprint file         # 在当前目录下查找以java开始的文件，并把结果输出到file中\n> \t\tfind -name ap* -o -name may*         # 查找以ap或may开头的文件\n\n### 1.12 vi 是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。进入vi的命令\n\nvi filename :打开或新建文件,并将光标置于第一行首\n\t\tvi n filename ：打开文件,并将光标置于第n行首\n\t\tvi filename ：打开文件,并将光标置于一行首\n\t\tvi /pattern filename：打开文件,并将光标置于第一个与pattern匹配的串处\n\t\tvi -r filename ：在上次正用vi编辑时发生系统崩溃,恢复filename\n\t\tvi filename....filename ：打开多个文件,依次进行编辑\n\n屏幕翻滚类命令\n\t\tCtrl u：向文件首翻半屏\n\t\tCtrl d：向文件尾翻半屏\n\t\tCtrl f：向文件尾翻一屏\n\t\tCtrl＋b；向文件首翻一屏\n\t\tnz：将第n行滚至屏幕顶部,不指定n时将当前行滚至屏幕顶部.\n\t\t插入文本类命令\n\t\ti ：在光标前\n\t\tI ：在当前行首\n\t\ta：光标后\n\t\tA：在当前行尾\n\t\to：在当前行之下新开一行\n\t\tO：在当前行之上新开一行\n\t\tr：替换当前字符\n\t\tR：替换当前字符及其后的字符,直至按ESC键\n\t\ts：从当前光标位置处开始,以输入的文本替代指定数目的字符\n\n保存命令\n\t\t按ESC键 跳到命令模式，然后：\n\t\t:w 保存文件但不退出vi\n\t\t:w file 将修改另外保存到file中，不退出vi\n\t\t:w! 强制保存，不推出vi\n\t\t:wq 保存文件并退出vi\n\t\t:wq! 强制保存文件，并退出vi\n\t\t:q 不保存文件，退出vi\n\t\t:q! 不保存文件，强制退出vi\n\t\t:e! 放弃所有修改，从上次保存文件开始再编辑","slug":"linuxOrder","published":1,"updated":"2024-02-28T03:11:23.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt5804ea0000k4cleb21cgyv","content":"<h2 id=\"1．Linux管理文件和目录的命令\"><a href=\"#1．Linux管理文件和目录的命令\" class=\"headerlink\" title=\"1．Linux管理文件和目录的命令\"></a>1．Linux管理文件和目录的命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pwd</td>\n<td>显当前目录</td>\n</tr>\n<tr>\n<td>ls</td>\n<td>查看目录下的内容</td>\n</tr>\n<tr>\n<td>cd</td>\n<td>改变所在目录</td>\n</tr>\n<tr>\n<td>cat</td>\n<td>显示文件的内容</td>\n</tr>\n<tr>\n<td>grep</td>\n<td>在文件中查找某字符</td>\n</tr>\n<tr>\n<td>cp</td>\n<td>复制文件</td>\n</tr>\n<tr>\n<td>touch</td>\n<td>创建文件</td>\n</tr>\n<tr>\n<td>mv</td>\n<td>移动文件</td>\n</tr>\n<tr>\n<td>rm</td>\n<td>删除文件</td>\n</tr>\n<tr>\n<td>rmdir</td>\n<td>删除目录</td>\n</tr>\n<tr>\n<td>vi</td>\n<td>编辑文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-1-pwd命令\"><a href=\"#1-1-pwd命令\" class=\"headerlink\" title=\"1.1 pwd命令\"></a>1.1 pwd命令</h3><p>该命令的英文解释为print working directory(打印工作目录)。输入pwd命令，Linux会输出当前目录。</p>\n<h3 id=\"1-2-cd命令-用来改变所在目录。\"><a href=\"#1-2-cd命令-用来改变所在目录。\" class=\"headerlink\" title=\"1.2 cd命令 用来改变所在目录。\"></a>1.2 cd命令 用来改变所在目录。</h3><p>cd &#x2F; 转到根目录中<br>        cd ~ 转到&#x2F;home&#x2F;user用户目录下<br>        cd &#x2F;usr 转到根目录下的usr目录中————-绝对路径<br>        cd test 转到当前目录下的test子目录中——-相对路径</p>\n<h3 id=\"1-3-ls命令-用来查看目录的内容。\"><a href=\"#1-3-ls命令-用来查看目录的内容。\" class=\"headerlink\" title=\"1.3 ls命令 用来查看目录的内容。\"></a>1.3 ls命令 用来查看目录的内容。</h3><p>选项 含义<br>        -a 列举目录中的全部文件，包括隐藏文件<br>        -l 列举目录中的细节，包括权限、所有者、组群、大小、创建日期、文件是否是链接等<br>        -f 列举的文件显示文件类型<br>        -r 逆向，从后向前地列举目录中内容<br>        -R 递归，该选项递归地列举当前目录下所有子目录内的内容<br>        -s 大小，按文件大小排序<br>        -h 以人类可读的方式显示文件的大小，如用K、M、G作单位</p>\n<p>ls -l examples.doc 列举文件examples.doc的所有信息</p>\n<h3 id=\"1-4-cat命令\"><a href=\"#1-4-cat命令\" class=\"headerlink\" title=\"1.4 cat命令\"></a>1.4 cat命令</h3><p>cat命令可以用来合并文件，也可以用来在屏幕上显示整个文件的内容。<br>        cat snow.txt 该命令显示文件snow.txt的内容，ctrl+D退出cat。</p>\n<h3 id=\"1-5-grep命令-最大功能是在一堆文件中查找一个特定的字符串。\"><a href=\"#1-5-grep命令-最大功能是在一堆文件中查找一个特定的字符串。\" class=\"headerlink\" title=\"1.5 grep命令 最大功能是在一堆文件中查找一个特定的字符串。\"></a>1.5 grep命令 最大功能是在一堆文件中查找一个特定的字符串。</h3><p>grep money test.txt<br>        以上命令在test.txt中查找money这个字符串，grep查找是区分大小写的。</p>\n<h3 id=\"1-6-touch命令\"><a href=\"#1-6-touch命令\" class=\"headerlink\" title=\"1.6 touch命令\"></a>1.6 touch命令</h3><p>touch命令用来创建新文件，他可以创建一个空白的文件，可以在其中添加文本和数据。<br>        touch newfile 该命令创建一个名为newfile的空白文件。</p>\n<h3 id=\"1-7-cp命令-用来拷贝文件，要复制文件，输入命令：\"><a href=\"#1-7-cp命令-用来拷贝文件，要复制文件，输入命令：\" class=\"headerlink\" title=\"1.7 cp命令 用来拷贝文件，要复制文件，输入命令：\"></a>1.7 cp命令 用来拷贝文件，要复制文件，输入命令：</h3><p>cp<br>        cp t.txt Document&#x2F;t 该命令将把文件t.txt复制到Document目录下，并命名为t。<br>        选项 含义<br>        -I 互动：如果文件将覆盖目标中的文件，他会提示确认<br>        -r 递归：这个选项会复制整个目录树、子目录以及其他<br>        -v 详细：显示文件的复制进度</p>\n<h3 id=\"1-8-mv命令-用来移动文件。\"><a href=\"#1-8-mv命令-用来移动文件。\" class=\"headerlink\" title=\"1.8 mv命令 用来移动文件。\"></a>1.8 mv命令 用来移动文件。</h3><p>选项 说明<br>        -I 互动：如果选择的文件会覆盖目标中的文件，他会提示确认<br>        -f 强制：它会超越互动模式，不提示地移动文件，属于很危险的选项<br>        -v 详细：显示文件的移动进度<br>        mv t.txt Document 把文件t.txt 移动到目录Document中。</p>\n<h3 id=\"1-9-rm命令-用来删除文件。\"><a href=\"#1-9-rm命令-用来删除文件。\" class=\"headerlink\" title=\"1.9 rm命令 用来删除文件。\"></a>1.9 rm命令 用来删除文件。</h3><p>选项 说明<br>        -I 互动：提示确认删除<br>        -f 强制：代替互动模式，不提示确认删除<br>        -v 详细：显示文件的删除进度<br>        -r 递归：将删除某个目录以及其中所有的文件和子目录<br>        rm t.txt 该命令删除文件t.txt</p>\n<h3 id=\"1-10-rmdir命令-用来删除目录。\"><a href=\"#1-10-rmdir命令-用来删除目录。\" class=\"headerlink\" title=\"1.10 rmdir命令 用来删除目录。\"></a>1.10 rmdir命令 用来删除目录。</h3><h3 id=\"1-11-find命令-用来查询文件\"><a href=\"#1-11-find命令-用来查询文件\" class=\"headerlink\" title=\"1.11 find命令  用来查询文件\"></a>1.11 find命令  用来查询文件</h3><p><strong>按照文件名搜索</strong></p>\n<p>选项：<br>        -name    按照文件名搜索<br>        -iname   按照文件名搜索，不区分文件名大小写<br>        -inum    按照inode号搜索</p>\n<p>如要在<code>/home/linuxize</code>目录下搜索一个名为<code>document.pdf</code>的文件，你可以使用下面的命令。</p>\n<blockquote>\n<p>find &#x2F;home&#x2F;linuxize -type f -name document.pdf</p>\n</blockquote>\n<p><strong>按照文件类型搜索</strong></p>\n<p>选项：<br>        -type d  查找目录<br>        -type f  查找普通文件<br>        -type l  查找软链接文件</p>\n<p>例如，要在<code>/var/log/nginx</code>目录下找到所有以<code>.log.gz</code>结尾的文件，你可以使用一下命令</p>\n<blockquote>\n<p>​\tfind &#x2F;var&#x2F;log&#x2F;nginx -type f -name ‘*.log.gz’</p>\n</blockquote>\n<p><strong>使用案例</strong></p>\n<blockquote>\n<p>find -name java*                     # 在当前目录下查找以java开始的文件<br>        find -name java* fprint file         # 在当前目录下查找以java开始的文件，并把结果输出到file中<br>        find -name ap* -o -name may*         # 查找以ap或may开头的文件</p>\n</blockquote>\n<h3 id=\"1-12-vi-是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi-Improved），与vi编辑器完全兼容，而且实现了很多增强功能。进入vi的命令\"><a href=\"#1-12-vi-是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi-Improved），与vi编辑器完全兼容，而且实现了很多增强功能。进入vi的命令\" class=\"headerlink\" title=\"1.12 vi 是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。进入vi的命令\"></a>1.12 vi 是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。进入vi的命令</h3><p>vi filename :打开或新建文件,并将光标置于第一行首<br>        vi n filename ：打开文件,并将光标置于第n行首<br>        vi filename ：打开文件,并将光标置于一行首<br>        vi &#x2F;pattern filename：打开文件,并将光标置于第一个与pattern匹配的串处<br>        vi -r filename ：在上次正用vi编辑时发生系统崩溃,恢复filename<br>        vi filename….filename ：打开多个文件,依次进行编辑</p>\n<p>屏幕翻滚类命令<br>        Ctrl u：向文件首翻半屏<br>        Ctrl d：向文件尾翻半屏<br>        Ctrl f：向文件尾翻一屏<br>        Ctrl＋b；向文件首翻一屏<br>        nz：将第n行滚至屏幕顶部,不指定n时将当前行滚至屏幕顶部.<br>        插入文本类命令<br>        i ：在光标前<br>        I ：在当前行首<br>        a：光标后<br>        A：在当前行尾<br>        o：在当前行之下新开一行<br>        O：在当前行之上新开一行<br>        r：替换当前字符<br>        R：替换当前字符及其后的字符,直至按ESC键<br>        s：从当前光标位置处开始,以输入的文本替代指定数目的字符</p>\n<p>保存命令<br>        按ESC键 跳到命令模式，然后：<br>        :w 保存文件但不退出vi<br>        :w file 将修改另外保存到file中，不退出vi<br>        :w! 强制保存，不推出vi<br>        :wq 保存文件并退出vi<br>        :wq! 强制保存文件，并退出vi<br>        :q 不保存文件，退出vi<br>        :q! 不保存文件，强制退出vi<br>        :e! 放弃所有修改，从上次保存文件开始再编辑</p>\n","site":{"data":{}},"length":2300,"excerpt":"","more":"<h2 id=\"1．Linux管理文件和目录的命令\"><a href=\"#1．Linux管理文件和目录的命令\" class=\"headerlink\" title=\"1．Linux管理文件和目录的命令\"></a>1．Linux管理文件和目录的命令</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>pwd</td>\n<td>显当前目录</td>\n</tr>\n<tr>\n<td>ls</td>\n<td>查看目录下的内容</td>\n</tr>\n<tr>\n<td>cd</td>\n<td>改变所在目录</td>\n</tr>\n<tr>\n<td>cat</td>\n<td>显示文件的内容</td>\n</tr>\n<tr>\n<td>grep</td>\n<td>在文件中查找某字符</td>\n</tr>\n<tr>\n<td>cp</td>\n<td>复制文件</td>\n</tr>\n<tr>\n<td>touch</td>\n<td>创建文件</td>\n</tr>\n<tr>\n<td>mv</td>\n<td>移动文件</td>\n</tr>\n<tr>\n<td>rm</td>\n<td>删除文件</td>\n</tr>\n<tr>\n<td>rmdir</td>\n<td>删除目录</td>\n</tr>\n<tr>\n<td>vi</td>\n<td>编辑文件</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-1-pwd命令\"><a href=\"#1-1-pwd命令\" class=\"headerlink\" title=\"1.1 pwd命令\"></a>1.1 pwd命令</h3><p>该命令的英文解释为print working directory(打印工作目录)。输入pwd命令，Linux会输出当前目录。</p>\n<h3 id=\"1-2-cd命令-用来改变所在目录。\"><a href=\"#1-2-cd命令-用来改变所在目录。\" class=\"headerlink\" title=\"1.2 cd命令 用来改变所在目录。\"></a>1.2 cd命令 用来改变所在目录。</h3><p>cd &#x2F; 转到根目录中<br>        cd ~ 转到&#x2F;home&#x2F;user用户目录下<br>        cd &#x2F;usr 转到根目录下的usr目录中————-绝对路径<br>        cd test 转到当前目录下的test子目录中——-相对路径</p>\n<h3 id=\"1-3-ls命令-用来查看目录的内容。\"><a href=\"#1-3-ls命令-用来查看目录的内容。\" class=\"headerlink\" title=\"1.3 ls命令 用来查看目录的内容。\"></a>1.3 ls命令 用来查看目录的内容。</h3><p>选项 含义<br>        -a 列举目录中的全部文件，包括隐藏文件<br>        -l 列举目录中的细节，包括权限、所有者、组群、大小、创建日期、文件是否是链接等<br>        -f 列举的文件显示文件类型<br>        -r 逆向，从后向前地列举目录中内容<br>        -R 递归，该选项递归地列举当前目录下所有子目录内的内容<br>        -s 大小，按文件大小排序<br>        -h 以人类可读的方式显示文件的大小，如用K、M、G作单位</p>\n<p>ls -l examples.doc 列举文件examples.doc的所有信息</p>\n<h3 id=\"1-4-cat命令\"><a href=\"#1-4-cat命令\" class=\"headerlink\" title=\"1.4 cat命令\"></a>1.4 cat命令</h3><p>cat命令可以用来合并文件，也可以用来在屏幕上显示整个文件的内容。<br>        cat snow.txt 该命令显示文件snow.txt的内容，ctrl+D退出cat。</p>\n<h3 id=\"1-5-grep命令-最大功能是在一堆文件中查找一个特定的字符串。\"><a href=\"#1-5-grep命令-最大功能是在一堆文件中查找一个特定的字符串。\" class=\"headerlink\" title=\"1.5 grep命令 最大功能是在一堆文件中查找一个特定的字符串。\"></a>1.5 grep命令 最大功能是在一堆文件中查找一个特定的字符串。</h3><p>grep money test.txt<br>        以上命令在test.txt中查找money这个字符串，grep查找是区分大小写的。</p>\n<h3 id=\"1-6-touch命令\"><a href=\"#1-6-touch命令\" class=\"headerlink\" title=\"1.6 touch命令\"></a>1.6 touch命令</h3><p>touch命令用来创建新文件，他可以创建一个空白的文件，可以在其中添加文本和数据。<br>        touch newfile 该命令创建一个名为newfile的空白文件。</p>\n<h3 id=\"1-7-cp命令-用来拷贝文件，要复制文件，输入命令：\"><a href=\"#1-7-cp命令-用来拷贝文件，要复制文件，输入命令：\" class=\"headerlink\" title=\"1.7 cp命令 用来拷贝文件，要复制文件，输入命令：\"></a>1.7 cp命令 用来拷贝文件，要复制文件，输入命令：</h3><p>cp<br>        cp t.txt Document&#x2F;t 该命令将把文件t.txt复制到Document目录下，并命名为t。<br>        选项 含义<br>        -I 互动：如果文件将覆盖目标中的文件，他会提示确认<br>        -r 递归：这个选项会复制整个目录树、子目录以及其他<br>        -v 详细：显示文件的复制进度</p>\n<h3 id=\"1-8-mv命令-用来移动文件。\"><a href=\"#1-8-mv命令-用来移动文件。\" class=\"headerlink\" title=\"1.8 mv命令 用来移动文件。\"></a>1.8 mv命令 用来移动文件。</h3><p>选项 说明<br>        -I 互动：如果选择的文件会覆盖目标中的文件，他会提示确认<br>        -f 强制：它会超越互动模式，不提示地移动文件，属于很危险的选项<br>        -v 详细：显示文件的移动进度<br>        mv t.txt Document 把文件t.txt 移动到目录Document中。</p>\n<h3 id=\"1-9-rm命令-用来删除文件。\"><a href=\"#1-9-rm命令-用来删除文件。\" class=\"headerlink\" title=\"1.9 rm命令 用来删除文件。\"></a>1.9 rm命令 用来删除文件。</h3><p>选项 说明<br>        -I 互动：提示确认删除<br>        -f 强制：代替互动模式，不提示确认删除<br>        -v 详细：显示文件的删除进度<br>        -r 递归：将删除某个目录以及其中所有的文件和子目录<br>        rm t.txt 该命令删除文件t.txt</p>\n<h3 id=\"1-10-rmdir命令-用来删除目录。\"><a href=\"#1-10-rmdir命令-用来删除目录。\" class=\"headerlink\" title=\"1.10 rmdir命令 用来删除目录。\"></a>1.10 rmdir命令 用来删除目录。</h3><h3 id=\"1-11-find命令-用来查询文件\"><a href=\"#1-11-find命令-用来查询文件\" class=\"headerlink\" title=\"1.11 find命令  用来查询文件\"></a>1.11 find命令  用来查询文件</h3><p><strong>按照文件名搜索</strong></p>\n<p>选项：<br>        -name    按照文件名搜索<br>        -iname   按照文件名搜索，不区分文件名大小写<br>        -inum    按照inode号搜索</p>\n<p>如要在<code>/home/linuxize</code>目录下搜索一个名为<code>document.pdf</code>的文件，你可以使用下面的命令。</p>\n<blockquote>\n<p>find &#x2F;home&#x2F;linuxize -type f -name document.pdf</p>\n</blockquote>\n<p><strong>按照文件类型搜索</strong></p>\n<p>选项：<br>        -type d  查找目录<br>        -type f  查找普通文件<br>        -type l  查找软链接文件</p>\n<p>例如，要在<code>/var/log/nginx</code>目录下找到所有以<code>.log.gz</code>结尾的文件，你可以使用一下命令</p>\n<blockquote>\n<p>​\tfind &#x2F;var&#x2F;log&#x2F;nginx -type f -name ‘*.log.gz’</p>\n</blockquote>\n<p><strong>使用案例</strong></p>\n<blockquote>\n<p>find -name java*                     # 在当前目录下查找以java开始的文件<br>        find -name java* fprint file         # 在当前目录下查找以java开始的文件，并把结果输出到file中<br>        find -name ap* -o -name may*         # 查找以ap或may开头的文件</p>\n</blockquote>\n<h3 id=\"1-12-vi-是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi-Improved），与vi编辑器完全兼容，而且实现了很多增强功能。进入vi的命令\"><a href=\"#1-12-vi-是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi-Improved），与vi编辑器完全兼容，而且实现了很多增强功能。进入vi的命令\" class=\"headerlink\" title=\"1.12 vi 是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。进入vi的命令\"></a>1.12 vi 是UNIX操作系统和类UNIX操作系统中最通用的全屏幕纯文本编辑器。Linux中的vi编辑器叫vim，它是vi的增强版（vi Improved），与vi编辑器完全兼容，而且实现了很多增强功能。进入vi的命令</h3><p>vi filename :打开或新建文件,并将光标置于第一行首<br>        vi n filename ：打开文件,并将光标置于第n行首<br>        vi filename ：打开文件,并将光标置于一行首<br>        vi &#x2F;pattern filename：打开文件,并将光标置于第一个与pattern匹配的串处<br>        vi -r filename ：在上次正用vi编辑时发生系统崩溃,恢复filename<br>        vi filename….filename ：打开多个文件,依次进行编辑</p>\n<p>屏幕翻滚类命令<br>        Ctrl u：向文件首翻半屏<br>        Ctrl d：向文件尾翻半屏<br>        Ctrl f：向文件尾翻一屏<br>        Ctrl＋b；向文件首翻一屏<br>        nz：将第n行滚至屏幕顶部,不指定n时将当前行滚至屏幕顶部.<br>        插入文本类命令<br>        i ：在光标前<br>        I ：在当前行首<br>        a：光标后<br>        A：在当前行尾<br>        o：在当前行之下新开一行<br>        O：在当前行之上新开一行<br>        r：替换当前字符<br>        R：替换当前字符及其后的字符,直至按ESC键<br>        s：从当前光标位置处开始,以输入的文本替代指定数目的字符</p>\n<p>保存命令<br>        按ESC键 跳到命令模式，然后：<br>        :w 保存文件但不退出vi<br>        :w file 将修改另外保存到file中，不退出vi<br>        :w! 强制保存，不推出vi<br>        :wq 保存文件并退出vi<br>        :wq! 强制保存文件，并退出vi<br>        :q 不保存文件，退出vi<br>        :q! 不保存文件，强制退出vi<br>        :e! 放弃所有修改，从上次保存文件开始再编辑</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clsx20wz00001j8cl21vo5bh5","category_id":"clsx20wz60004j8clag105db1","_id":"clsx20wzg000hj8cl0gd4480t"},{"post_id":"clsx20wz40003j8cl16xb8uf7","category_id":"clsx20wzd000cj8cl183r4axo","_id":"clsx20wzh000mj8cl3j7icmoq"},{"post_id":"clsx20wza0007j8clgsn299za","category_id":"clsx20wzh000jj8cldhdb7u2o","_id":"clsx20wzi000pj8cl4j79ddmc"},{"post_id":"clsx20wzc0009j8cl3zo0b9a7","category_id":"clsy0vxf70001f8cldejn71a4","_id":"clsy0vxfc0006f8cl76rtb8h8"},{"post_id":"clsx20wzd000bj8clepht2luj","category_id":"clsy0vxfa0004f8cl5udfe1vs","_id":"clsy0vxfd0009f8cl5zvh7zrc"},{"post_id":"clsy9j3k20000x8clcar56ytl","category_id":"clsx20wzd000cj8cl183r4axo","_id":"clsy9j3kc0004x8cl10xegnc8"},{"post_id":"clsy9j3k60001x8clesj5guqd","category_id":"clsy9j3kb0003x8clbrtp0zs3","_id":"clsy9j3kd0007x8cld3ed0kim"},{"post_id":"clt5804ea0000k4cleb21cgyv","category_id":"clt5804en0001k4cle2n58py3","_id":"clt5804es0004k4cl5unm0scu"}],"PostTag":[{"post_id":"clsx20wz40003j8cl16xb8uf7","tag_id":"clsx20wz90005j8cl1tzq1n3v","_id":"clsx20wzh000lj8cl9i8ehbho"},{"post_id":"clsx20wz00001j8cl21vo5bh5","tag_id":"clsy0vxez0000f8cl1rmc8zcm","_id":"clsy0vxfa0003f8clg6er6tc0"},{"post_id":"clsx20wzc0009j8cl3zo0b9a7","tag_id":"clsy0vxf90002f8clbnoi945e","_id":"clsy0vxfc0007f8clfd2b0c5h"},{"post_id":"clsx20wzd000bj8clepht2luj","tag_id":"clsy0vxfb0005f8cl04ncdl7a","_id":"clsy0vxfd000af8cl57zu90ct"},{"post_id":"clsx20wza0007j8clgsn299za","tag_id":"clsy0vxfd0008f8clcv251jvt","_id":"clsy0vxfe000bf8cl3s059ex1"},{"post_id":"clsy9j3k20000x8clcar56ytl","tag_id":"clsy9j3k80002x8cl5dfc3el2","_id":"clsy9j3kd0006x8cl3v5mcoy0"},{"post_id":"clsy9j3k60001x8clesj5guqd","tag_id":"clsy9j3kc0005x8cl8vhhcw2p","_id":"clsy9j3kd0008x8cl25l7h99z"},{"post_id":"clt5804ea0000k4cleb21cgyv","tag_id":"clt5804eq0002k4cl1fvh0g3m","_id":"clt5804es0003k4cl88hb3zw8"}],"Tag":[{"name":"文章","_id":"clsx20wz90005j8cl1tzq1n3v"},{"name":"理论","_id":"clsx20wzg000ij8cl3nci6o9v"},{"name":"ConcurrentHashMap","_id":"clsy0vxez0000f8cl1rmc8zcm"},{"name":"redis持久化","_id":"clsy0vxf90002f8clbnoi945e"},{"name":"线程池","_id":"clsy0vxfb0005f8cl04ncdl7a"},{"name":"TCP连接","_id":"clsy0vxfd0008f8clcv251jvt"},{"name":"指令","_id":"clsy9j3k80002x8cl5dfc3el2"},{"name":"线程的生命周期","_id":"clsy9j3kc0005x8cl8vhhcw2p"},{"name":"Linux常用命令","_id":"clt5804eq0002k4cl1fvh0g3m"}]}}